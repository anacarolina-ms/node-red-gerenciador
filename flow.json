[
    {
        "id": "15077c63cf28a6b8",
        "type": "tab",
        "label": "MES MODBUS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "23fefab45ba4d7fc",
        "type": "tab",
        "label": "MES SIEMENS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4a59210c8e331d38",
        "type": "tab",
        "label": "MES ROCKWELL",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "279b1bddf30193fc",
        "type": "tab",
        "label": "MES GERENCIADOR",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "97d2ebec5034633f",
        "type": "subflow",
        "name": "dadosIniciaisEventosVariaveis.json",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9ff0a16ac9766cb5",
        "type": "subflow",
        "name": "dadosIniciaisVariaveis.json",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 240,
                "y": 80,
                "wires": [
                    {
                        "id": "af5c09bc0b5a484f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 80,
                "wires": [
                    {
                        "id": "870a81bc3db48901",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d90c1062b3266c5e",
        "type": "subflow",
        "name": "dadosIniciais.json",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f51287b6fd292c7e",
        "type": "telegram bot",
        "botname": "nexxusesbot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "4c66b806f3b9f822",
        "type": "json",
        "z": "97d2ebec5034633f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 630,
        "y": 120,
        "wires": [
            [
                "3b0fe7288c867c5b"
            ]
        ]
    },
    {
        "id": "123d043cb100e3ec",
        "type": "file in",
        "z": "97d2ebec5034633f",
        "name": "dadosIniciaisEventosVariaveis.json",
        "filename": "C:\\Users\\Nexxus\\Desktop\\Node-RED\\archives\\dadosIniciaisEventosVariaveis.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 80,
        "wires": [
            [
                "4c66b806f3b9f822"
            ]
        ]
    },
    {
        "id": "7e6495b7dbe0bcb5",
        "type": "inject",
        "z": "97d2ebec5034633f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "123d043cb100e3ec"
            ]
        ]
    },
    {
        "id": "3b0fe7288c867c5b",
        "type": "function",
        "z": "97d2ebec5034633f",
        "name": "Atribui variaveis para dadosIniciaisEventosVariaveis.json",
        "func": "// Definiçoes das variaveis a serem lidas por evento\nvar CodVarEvento = [];\nvar TipVarEvento = [];\nvar UltimoValLeitura = [];\n\nfor(let pos in msg.payload[0].ListaAdicionaEventosVariaveis)\n{\n    CodVarEvento.push(msg.payload[0].ListaAdicionaEventosVariaveis[pos].CodVariavelLeitura);\n    TipVarEvento.push(msg.payload[0].ListaAdicionaEventosVariaveis[pos].TipVariavelLeitura);\n    UltimoValLeitura.push(msg.payload[0].ListaAdicionaEventosVariaveis[pos].UltimoValLeitura);\n}\n\nglobal.set(\"CodVarEvento\", CodVarEvento);\nglobal.set(\"TipVarEvento\", TipVarEvento);\nglobal.set(\"UltimoValLeitura\", UltimoValLeitura);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "bf94b06613737a0b",
        "type": "json",
        "z": "9ff0a16ac9766cb5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 590,
        "y": 120,
        "wires": [
            [
                "870a81bc3db48901"
            ]
        ]
    },
    {
        "id": "870a81bc3db48901",
        "type": "function",
        "z": "9ff0a16ac9766cb5",
        "name": "Atribui variaveis para dadosIniciaisVariaveis.json",
        "func": "// Definiçoes das variaveis a serem lidas periodicamente\nvar TipConexao = [];\nvar CodVariavelLeitura = [];\nvar ValMuitoBaixo = [];\nvar ValBaixo = [];\nvar ValAlto = [];\nvar ValMuitoAlto = [];\nvar NumCasasDecimais = [];\nvar TipVariavelLeituraOPC = [];\nvar ValEscala = [];\nvar CodAreaProcesso = [];\nvar CodUnidadeEmpresa = [];\nvar TipAlarmeDigital = [];\nvar TipVariavelLeitura = [];\nvar TipMonitoracaoPeriodico = [];\n\nvar CodAreaProcessoAPF = []\nvar TipFuncionando = []\n\nfor(let pos in msg.payload[0].ListaRetornaDadosVariavel)\n{\n    TipConexao.push(msg.payload[0].ListaRetornaDadosVariavel[pos].TipConexao);\n    CodVariavelLeitura.push(msg.payload[0].ListaRetornaDadosVariavel[pos].CodVariavelLeitura);\n    ValMuitoBaixo.push(msg.payload[0].ListaRetornaDadosVariavel[pos].ValMuitoBaixo);\n    ValBaixo.push(msg.payload[0].ListaRetornaDadosVariavel[pos].ValBaixo);\n    ValAlto.push(msg.payload[0].ListaRetornaDadosVariavel[pos].ValAlto);\n    ValMuitoAlto.push(msg.payload[0].ListaRetornaDadosVariavel[pos].ValMuitoAlto);\n    NumCasasDecimais.push(msg.payload[0].ListaRetornaDadosVariavel[pos].NumCasasDecimais);\n    TipVariavelLeituraOPC.push(msg.payload[0].ListaRetornaDadosVariavel[pos].TipVariavelLeituraOPC);\n    ValEscala.push(msg.payload[0].ListaRetornaDadosVariavel[pos].ValEscala);\n    CodAreaProcesso.push(msg.payload[0].ListaRetornaDadosVariavel[pos].CodAreaProcesso);\n    CodUnidadeEmpresa.push(msg.payload[0].ListaRetornaDadosVariavel[pos].CodUnidadeEmpresa);\n    TipAlarmeDigital.push(msg.payload[0].ListaRetornaDadosVariavel[pos].TipAlarmeDigital);\n    TipVariavelLeitura.push(msg.payload[0].ListaRetornaDadosVariavel[pos].TipVariavelLeitura);\n    TipMonitoracaoPeriodico.push(msg.payload[0].ListaRetornaDadosVariavel[pos].TipMonitoracaoPeriodico);\n}\n\nfor(let pos in msg.payload[0].ListaRetornaAreaProcessoFuncionando)\n{\n    CodAreaProcessoAPF.push(msg.payload[0].ListaRetornaAreaProcessoFuncionando[pos].CodAreaProcesso);\n    TipFuncionando.push(msg.payload[0].ListaRetornaAreaProcessoFuncionando[pos].TipFuncionando);\n}\n\nglobal.set(\"TipConexaoVar\", TipConexao);\nglobal.set(\"CodVariavelLeituraVar\", CodVariavelLeitura);\nglobal.set(\"ValMuitoBaixoVar\", ValMuitoBaixo);\nglobal.set(\"ValBaixoVar\", ValBaixo);\nglobal.set(\"ValAltoVar\", ValAlto);\nglobal.set(\"ValMuitoAltoVar\", ValMuitoAlto);\nglobal.set(\"NumCasasDecimaisVar\", NumCasasDecimais);\nglobal.set(\"TipVariavelLeituraOPCVar\", TipVariavelLeituraOPC);\nglobal.set(\"ValEscalaVar\", ValEscala);\nglobal.set(\"CodAreaProcessoVar\", CodAreaProcesso);\nglobal.set(\"CodUnidadeEmpresaVar\", CodUnidadeEmpresa);\nglobal.set(\"TipAlarmeDigitalVar\", TipAlarmeDigital);\nglobal.set(\"TipVariavelLeituraVar\", TipVariavelLeitura);\nglobal.set(\"TipMonitoracaoPeriodicoVar\", TipMonitoracaoPeriodico);\n\nglobal.set(\"TipFuncionandoVar\", TipFuncionando);\nglobal.set(\"CodAreaProcessoAPF\", CodAreaProcessoAPF);\n\nmsg = {}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "af5c09bc0b5a484f",
        "type": "file in",
        "z": "9ff0a16ac9766cb5",
        "name": "dadosIniciaisVariaveis.json",
        "filename": "C:\\Users\\Nexxus\\Desktop\\Node-RED\\archives\\dadosIniciaisVariaveis.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 420,
        "y": 80,
        "wires": [
            [
                "bf94b06613737a0b"
            ]
        ]
    },
    {
        "id": "0f7bf614568d8629",
        "type": "inject",
        "z": "d90c1062b3266c5e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "a3ca986ce2b7e994"
            ]
        ]
    },
    {
        "id": "a3ca986ce2b7e994",
        "type": "file in",
        "z": "d90c1062b3266c5e",
        "name": "dadosIniciais.json",
        "filename": "C:\\Users\\Nexxus\\Desktop\\Node-RED\\archives\\dadosIniciais.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 390,
        "y": 80,
        "wires": [
            [
                "cd25292ca9de915c"
            ]
        ]
    },
    {
        "id": "cd25292ca9de915c",
        "type": "json",
        "z": "d90c1062b3266c5e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 530,
        "y": 120,
        "wires": [
            [
                "155ab26a539397f9"
            ]
        ]
    },
    {
        "id": "155ab26a539397f9",
        "type": "function",
        "z": "d90c1062b3266c5e",
        "name": "Atribui variaveis para dadosIniciais.json",
        "func": "// Definiçoes das variaveis a serem lidas\n// HOST\nvar Host = [];\nvar Porta = [];\n// MODBUS\nvar Fc = [];\nvar Address = [];\nvar Quantity = [];\nvar Unitid = [];\n// SIEMENS\nvar Rack = [];\nvar Slot = [];\nvar Data = [];\n// ROCKWELL\nvar CPUSlot = [];\nvar EthernetSlot = [];\nvar TagName = [];\nvar ProgName = [];\nvar DataType = [];\n// GERENCIADOR\nvar TipConexao = [];\nvar TipUnidadePeriodo = [];\nvar ValPeriodo = [];\nvar CodVariavelLeitura = [];\nvar DataVariavelLeituraHora = [];\nvar DataVariavelLeituraDia = [];\nvar DataAtualHora = [];\nvar TipVariavelLeitura = [];\n\n    for(let pos in msg.payload[0].ListaMonitoraGruposPeriodicos)\n    {\n        // HOST\n        Host.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].Host);\n        Porta.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].Porta);\n        // MODBUS\n        Fc.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].Fc);\n        Address.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].Address);\n        Quantity.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].Quantity);\n        Unitid.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].Unitid);\n        // SIEMENS\n        Rack.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].Rack);\n        Slot.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].Slot);\n        Data.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].Data);\n        // ROCKWELL\n        CPUSlot.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].CPUSlot);\n        EthernetSlot.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].EthernetSlot);\n        TagName.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].TagName);\n        ProgName.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].ProgName);\n        DataType.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].DataType);\n        // GERENCIADOR\n        TipConexao.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].TipConexao);\n        TipUnidadePeriodo.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].TipUnidadePeriodo);\n        ValPeriodo.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].ValPeriodo);\n        CodVariavelLeitura.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].CodVariavelLeitura);\n        TipVariavelLeitura.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].TipVariavelLeitura);\n        DataVariavelLeituraHora.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].DataVariavelLeituraHora);\n        DataVariavelLeituraDia.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].DataVariavelLeituraDia);\n        DataAtualHora.push(msg.payload[0].ListaMonitoraGruposPeriodicos[pos].DataAtualHora);\n    }\n// HOST\nglobal.set(\"Host\", Host);\nglobal.set(\"Porta\", Porta);\n// MODBUS\nglobal.set(\"Fc\", Fc);\nglobal.set(\"Address\", Address);\nglobal.set(\"Quantity\", Quantity);\nglobal.set(\"Unitid\", Unitid);\n// SIEMENS\nglobal.set(\"Rack\", Rack);\nglobal.set(\"Slot\", Slot);\nglobal.set(\"Data\", Data);\n// ROCKWELL\nglobal.set(\"CPUSlot\", CPUSlot);\nglobal.set(\"EthernetSlot\", EthernetSlot);\nglobal.set(\"TagName\", TagName);\nglobal.set(\"ProgName\", ProgName);\nglobal.set(\"DataType\", DataType);\n// GERENCIADOR\nglobal.set(\"TipConexao\", TipConexao);\nglobal.set(\"TipUnidadePeriodo\", TipUnidadePeriodo);\nglobal.set(\"ValPeriodo\", ValPeriodo);\nglobal.set(\"CodVarDI\", CodVariavelLeitura);\nglobal.set(\"DataVariavelLeituraHora\", DataVariavelLeituraHora);\nglobal.set(\"DataVariavelLeituraDiaAntiga\", DataVariavelLeituraDia);\nglobal.set(\"DataAtualHora\", DataAtualHora);\nglobal.set(\"TipVariavelLeitura\", TipVariavelLeitura);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6a3a73a300965b29",
        "type": "inject",
        "z": "15077c63cf28a6b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "6b9bf59da8bac57d"
            ]
        ]
    },
    {
        "id": "6b9bf59da8bac57d",
        "type": "function",
        "z": "15077c63cf28a6b8",
        "name": "Parametros [MODBUS]",
        "func": "// dadosIniciaisEventosVariaveis.json\nvar CodVarEvento = global.get('CodVarEvento');\nvar posEventos = [];\nvar pos = [];\n// dadosIniciais.json\nvar Host = global.get('Host');\nvar Porta = global.get('Porta');\nvar TipConexao = global.get('TipConexao');\nvar Fc = global.get('Fc');\nvar Address = global.get('Address');\nvar Quantity = global.get('Quantity');\nvar Unitid = global.get('Unitid');\nvar CodVarDI = global.get('CodVarDI');\nvar TipVariavelLeitura = global.get('TipVariavelLeitura');\n// Variavel de verificaçao\nlet aguarda2 = flow.get('aguarda2');\nlet posIgnore = global.get('posIgnore');\nlet reset = flow.get('reset');\n\nfor (let i in TipConexao) \n{\n    if (TipConexao[i] == \"TCP\") \n    {\n        if (CodVarDI[i] == CodVarEvento[i])\n        {\n            if (!posIgnore.includes(i)) \n            {\n                posEventos.push(i);\n            }\n        }\n    }\n}\n\nlet ins = {};\nlet key = 0;\n\nif(pos != null)\n{\n    for(let i in posEventos)\n    {\n        ins[i] =\n            [{\n                \"delta\": key,\n                \"name\": Host[posEventos[key]],\n                \"modbus_id\": Unitid[posEventos[key]],\n                \"functioncode\": Fc[posEventos[key]],\n                \"address\": Address[posEventos[key]],\n                \"quantity\": Quantity[posEventos[key]],\n                \"modbus_ip\": Host[posEventos[key]],\n                \"modbus_port\": Porta[posEventos[key]]\n            }];\n        key++;\n    }\n}\n\nkey = 0;\nflow.set(\"posEventos\", posEventos);\n\nif(posEventos != null)\n{\n    msg.payload = ins;\n    if(reset == true)\n    {\n        msg.reset = reset;\n    }\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 300,
        "wires": [
            [
                "5f0e106c42d98cf6"
            ]
        ]
    },
    {
        "id": "48b9248edbe21145",
        "type": "comment",
        "z": "15077c63cf28a6b8",
        "name": "Compara os valores das variaveis por evento e realiza as leituras",
        "info": "",
        "x": 270,
        "y": 240,
        "wires": []
    },
    {
        "id": "28ef3692ef123088",
        "type": "delay",
        "z": "15077c63cf28a6b8",
        "name": "0.2 msg/s",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.3",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 525,
        "y": 300,
        "wires": [
            [
                "9ee01bdc13254717"
            ]
        ],
        "l": false
    },
    {
        "id": "9ee01bdc13254717",
        "type": "function",
        "z": "15077c63cf28a6b8",
        "name": "forEach [MODBUS]",
        "func": "let periodica = flow.get('periodica')\n\nvar devices = msg.payload;\nflow.set(\"aguarda2\", true);\n\nmsg = [];\nif(periodica != true)\n{\n    devices.forEach((/** @type {{ modbus_id: any; modbus_ip: any; modbus_port: any; address: any; quantity: any; }} */ dev) => {\n        let m_response = \"\";\n        let Modbus = global.get('jsmodbus');\n        let net = global.get('net');\n        let socket = new net.Socket();\n        let client = new Modbus.client.TCP(socket, dev.modbus_id);\n        let options =\n        {\n            host: dev.modbus_ip,\n            port: dev.modbus_port,\n            retryTime: 50,\n            retryAlways: false\n        };\n        let Reconnect = global.get('nodenetreconnect');\n        let recon = new Reconnect(socket, options);\n        socket.setTimeout(3000);\n        socket.on('connect', function () {\n            // if comparando o FC (dev.functioncode)\n            // if FC == 3\n            client\n                .readHoldingRegisters(dev.address, dev.quantity)\n                .then(function (resp) {\n                    m_response = parseFloat(resp.response._body._values);\n                    node.send({\n                        \"topic\": \"Modbus Response\",\n                        \"unitid\": dev.modbus_id,\n                        \"host\": dev.modbus_ip,\n                        \"port\": dev.modbus_port,\n                        \"address\": dev.address,\n                        \"quantity\": dev.quantity,\n                        \"payload\": m_response\n                    });\n                    socket.end();\n                    recon.end();\n                    net.Socket('close');\n                });\n            socket.end();\n            recon.end();\n            net.Socket('close');\n        }, console.error);\n\n        socket.on('timeout', () => {\n            console.log('socket timeout');\n            recon.end();\n            socket.end();\n            net.Socket('close');\n        });\n\n        socket.on('error', function (err) {\n            if (err.code != \"ECONNRESET\") {\n                node.error({\n                    \"ip\": dev.modbus_ip,\n                    \"port\": dev.modbus_port,\n                    \"message\": \"ERRO! Falha na leitura do host \" + dev.modbus_ip + \"!\",\n                    \"error\": err.code\n                });\n                socket.end();\n                recon.end();\n                net.Socket('close');\n            }\n            socket.end();\n            recon.end();\n            net.Socket('close');\n        });\n        socket.connect(options);\n    });\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 300,
        "wires": [
            [
                "a1df0d4120e9d4a2"
            ]
        ]
    },
    {
        "id": "5f0e106c42d98cf6",
        "type": "split",
        "z": "15077c63cf28a6b8",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 475,
        "y": 300,
        "wires": [
            [
                "28ef3692ef123088"
            ]
        ],
        "l": false
    },
    {
        "id": "a1df0d4120e9d4a2",
        "type": "function",
        "z": "15077c63cf28a6b8",
        "name": "Sai­da [MODBUS]",
        "func": "let CodVarEvento = global.get('CodVarEvento');\nlet UltimoValLeitura = global.get('UltimoValLeitura');\nlet addressOrigem = global.get('Address');\nlet hostOrigem = global.get('Host');\nlet posEventos = flow.get('posEventos');\nlet posEventosLeitura = [];\nlet ip = msg.host;\nlet port = msg.port;\nlet address = msg.address;\nlet leitura = [];\n\n// verifica informaÃ§Ãµes\nfor(let i in hostOrigem)\n{\n    if(ip == hostOrigem[i])\n    {\n        if(address == addressOrigem[i])\n        {\n            if(posEventos.includes(i))\n            {\n                if(UltimoValLeitura[i] != msg.payload)\n                {\n                    posEventosLeitura.push(i);\n                    leitura.push(msg.payload);\n                    UltimoValLeitura[i] = msg.payload;\n                    global.set(\"UltimoValLeitura\", UltimoValLeitura);\n                    flow.set(\"leitura2\", leitura);\n                    flow.set(\"posEventosLeitura\", posEventosLeitura);\n                    /* node.warn(\"Eventos 1 MODBUS\");\n                    node.warn(new Date().getTime()); */\n                    return msg;\n                }\n            }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 300,
        "wires": [
            [
                "a94e28a65d5ebd90"
            ]
        ]
    },
    {
        "id": "bf0ac9de3be2bd5d",
        "type": "subflow:9ff0a16ac9766cb5",
        "z": "15077c63cf28a6b8",
        "name": "dadosIniciaisVariaveis.json",
        "x": 220,
        "y": 420,
        "wires": [
            [
                "3ddb835ad8075fe7"
            ]
        ]
    },
    {
        "id": "1f2583a9d0651664",
        "type": "comment",
        "z": "15077c63cf28a6b8",
        "name": "Escreve o arquivo de sai­da e modifica o arquivo dadosIniciaisEventosVariaveis.json",
        "info": "",
        "x": 330,
        "y": 360,
        "wires": []
    },
    {
        "id": "3ddb835ad8075fe7",
        "type": "function",
        "z": "15077c63cf28a6b8",
        "name": "Atribui variaveis [MODBUS]",
        "func": "var d = new Date();\nvar hora = (d.getHours()+\":\"+d.getMinutes()+\":\"+d.getSeconds()+\":\"+d.getMilliseconds());\n\nflow.set(\"hora2\", hora);\nflow.set(\"d2\", d);\n\nmsg.payload = d;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 420,
        "wires": [
            [
                "ce5cd1f7921ea80d"
            ]
        ]
    },
    {
        "id": "ce5cd1f7921ea80d",
        "type": "moment",
        "z": "15077c63cf28a6b8",
        "name": "Timezone",
        "topic": "logica",
        "input": "",
        "inputType": "msg",
        "inTz": "America/Sao_Paulo",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "YYYY-MM-DDTHH:mm:ss.SSSSSSSZ",
        "locale": "C",
        "output": "",
        "outputType": "msg",
        "outTz": "America/Sao_Paulo",
        "x": 680,
        "y": 420,
        "wires": [
            [
                "4bef71621ab8b38f"
            ]
        ]
    },
    {
        "id": "a94e28a65d5ebd90",
        "type": "link out",
        "z": "15077c63cf28a6b8",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "99e90f2c4edbbc49",
            "68f8d3f2644e7547"
        ],
        "x": 975,
        "y": 300,
        "wires": []
    },
    {
        "id": "99e90f2c4edbbc49",
        "type": "link in",
        "z": "15077c63cf28a6b8",
        "name": "link in 1",
        "links": [
            "a94e28a65d5ebd90"
        ],
        "x": 55,
        "y": 420,
        "wires": [
            [
                "bf0ac9de3be2bd5d"
            ]
        ]
    },
    {
        "id": "4bef71621ab8b38f",
        "type": "link out",
        "z": "15077c63cf28a6b8",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "442240102ab777ef",
            "0698d6203a73f2bd"
        ],
        "x": 775,
        "y": 420,
        "wires": []
    },
    {
        "id": "442240102ab777ef",
        "type": "link in",
        "z": "15077c63cf28a6b8",
        "name": "link in 2",
        "links": [
            "4bef71621ab8b38f",
            "9e26058fcf1a4f5a"
        ],
        "x": 55,
        "y": 480,
        "wires": [
            [
                "69f62dc96ff2b22a",
                "b8245f822cec4226"
            ]
        ]
    },
    {
        "id": "0e3e64baecd52bf6",
        "type": "inject",
        "z": "15077c63cf28a6b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "199fc92cf7740ad6"
            ]
        ]
    },
    {
        "id": "199fc92cf7740ad6",
        "type": "function",
        "z": "15077c63cf28a6b8",
        "name": "Verifica se o tempo estourou [MODBUS]",
        "func": "let DataVariavelLeituraDiaAntiga = global.get('DataVariavelLeituraDiaAntiga');\nlet TipUnidadePeriodo = global.get('TipUnidadePeriodo');\nlet ValPeriodo = global.get('ValPeriodo');\nlet tempo = [];\nlet posLeiturasPeriodicas = \"\";\nvar d = new Date();\nlet antiga = [];\nlet erro = flow.get('erro');\nlet aguarda = flow.get('aguarda') || false;\nlet posIgnore = global.get('posIgnore');\nlet pos = [];\n\n// Codigo das variaveis a serem lidas periodicamente\nvar CodVar = global.get('CodVariavelLeituraVar');\nvar CodVarDI = global.get('CodVarDI');\nvar Host = global.get('Host');\nvar Porta = global.get('Porta');\nvar TipConexao = global.get('TipConexao');\nvar Fc = global.get('Fc');\nvar Address = global.get('Address');\nvar Quantity = global.get('Quantity');\nvar Unitid = global.get('Unitid');\nvar CodVariavelLeitura = global.get('CodVariavelLeitura');\nvar TipVariavelLeitura = global.get('TipVariavelLeitura');\n\nlet ins = {};\nlet key = 0;\n\nfor(let i in TipUnidadePeriodo)\n{\n    antiga[i] = new Date(Date.parse(DataVariavelLeituraDiaAntiga[i]));\n    switch(TipUnidadePeriodo[i])\n    {\n        case 1: // segundo\n            antiga[i].setSeconds(antiga[i].getSeconds() + ValPeriodo[i]);\n            break;\n        case 2: // minuto\n            antiga[i].setMinutes(antiga[i].getMinutes() + ValPeriodo[i]);\n            break;\n        case 3: // hora\n            antiga[i].setHours(antiga[i].getHours() + ValPeriodo[i]);\n            break;\n    }\n}\n\nif(tempo != null)\n{\n    for(let i in DataVariavelLeituraDiaAntiga)\n    {\n        if (TipConexao[i] == \"TCP\") \n        {\n            if(antiga[i] <= d.getTime())\n            {\n                pos = i;\n            }\n        }\n    }\n}\n\nif(pos != null)\n{\n    if (!posIgnore.includes(pos)) \n    {\n        posLeiturasPeriodicas = pos;\n        ins[0] = [{ \n            \"delta\": key,\n            \"name\": Host[posLeiturasPeriodicas],\n            \"modbus_id\": Unitid[posLeiturasPeriodicas],\n            \"functioncode\": Fc[posLeiturasPeriodicas],\n            \"address\": Address[posLeiturasPeriodicas],\n            \"quantity\": Quantity[posLeiturasPeriodicas],\n            \"modbus_ip\": Host[posLeiturasPeriodicas],\n            \"modbus_port\": Porta[posLeiturasPeriodicas]\n        }]\n        key++\n    }\n}\n\nkey = 0\nflow.set(\"posLeiturasPeriodicas\", posLeiturasPeriodicas);\n\nif(posLeiturasPeriodicas != \"\" && aguarda == false){\n    msg.payload = ins\n    /* node.warn(\"Periodicas MODBUS 1\");\n    node.warn(new Date().getTime()); */\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 680,
        "wires": [
            [
                "dada40cbdc3fc763"
            ]
        ]
    },
    {
        "id": "3345391dd1c89379",
        "type": "comment",
        "z": "15077c63cf28a6b8",
        "name": "Compara em sequencia as datas das variaveis",
        "info": "",
        "x": 220,
        "y": 620,
        "wires": []
    },
    {
        "id": "0753538eff5f64ef",
        "type": "comment",
        "z": "15077c63cf28a6b8",
        "name": "EVENTOS",
        "info": "",
        "x": 100,
        "y": 200,
        "wires": []
    },
    {
        "id": "3e9979ea30412381",
        "type": "comment",
        "z": "15077c63cf28a6b8",
        "name": "PERIODICAS",
        "info": "",
        "x": 110,
        "y": 580,
        "wires": []
    },
    {
        "id": "dada40cbdc3fc763",
        "type": "split",
        "z": "15077c63cf28a6b8",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 575,
        "y": 680,
        "wires": [
            [
                "2fac056483878cd0"
            ]
        ],
        "l": false
    },
    {
        "id": "ecf4f9ea3de5868b",
        "type": "function",
        "z": "15077c63cf28a6b8",
        "name": "forEach [MODBUS]",
        "func": "let posLeiturasPeriodicas = flow.get(\"posLeiturasPeriodicas\");\nvar devices = msg.payload;\nflow.set(\"aguarda\", true);\nflow.set(\"periodica\", true);\n\nmsg = [];\ndevices.forEach((/** @type {{ modbus_id: any; modbus_ip: any; modbus_port: any; address: any; quantity: any; }} */ dev) => {\n   let m_response = \"\";\n   let Modbus = global.get('jsmodbus');\n   let net = global.get('net');\n   let socket = new net.Socket();\n   let client = new Modbus.client.TCP(socket, dev.modbus_id);\n   let options =\n   {\n      host: dev.modbus_ip,\n      port: dev.modbus_port,\n      retryTime: 50,\n      retryAlways: false\n   };\n   let Reconnect = global.get('nodenetreconnect');\n   let recon = new Reconnect(socket, options);\n   socket.on('connect', function () {\n      // if comparando o FC (dev.functioncode)\n      // if FC == 3\n      client\n         .readHoldingRegisters(dev.address, dev.quantity)\n         .then(function (resp) {\n            m_response = parseFloat(resp.response._body._values);\n            node.send({\n               \"topic\": \"Modbus Response\",\n               \"unitid\": dev.modbus_id,\n               \"host\": dev.modbus_ip,\n               \"port\": dev.modbus_port,\n               \"address\": dev.address,\n               \"quantity\": dev.quantity,\n               \"payload\": m_response\n            });\n            socket.end();\n            recon.end();\n            net.Socket('close');\n         });\n      socket.end();\n      recon.end();\n      net.Socket('close');\n   }, console.error);\n\n   socket.on('timeout', () => {\n      console.log('socket timeout');\n      flow.set(\"aguarda\", false);\n      recon.end();\n      socket.end();\n      net.Socket('close');\n   });\n\n   socket.on('error', function (err) {\n      flow.set(\"aguarda\", false);\n      if (err.code != \"ECONNRESET\") {\n         const fs = global.get('fs').promises;\n         let obj;\n         let json;\n         let filePath = 'C:/Nexxus/logPeriodicaModbus.json';\n         async function readFile(filePath) {\n            try {\n               const data = await fs.readFile(filePath);\n               //console.log(JSON.parse(data));\n               // node.warn(JSON.parse(data));\n               obj = JSON.parse(data);\n               let message = {\n                  \"ip\": dev.modbus_ip,\n                  \"port\": dev.modbus_port,\n                  \"message\": \"ERRO! Falha na leitura do host \" + dev.modbus_ip + \"!\",\n                  \"error\": err.code\n               }\n               obj.push(message);\n               json = JSON.stringify(obj);\n               fs.writeFile(filePath, json, 'utf8', function (err) {\n                  if (err) throw err;\n                  //console.log('complete');\n                  node.warn('complete');\n               }\n               );\n               msg.payload = obj[obj.length];\n               node.send(msg);\n            } catch (error) {\n               console.error(`Got an error trying to read the file: ${error.message}`);\n               node.error(`Got an error trying to read the file: ${error.message}`);\n            }\n         }\n         readFile(filePath);\n         node.error({\n            \"ip\": dev.modbus_ip,\n            \"port\": dev.modbus_port,\n            \"message\": \"ERRO! Falha na leitura do host \" + dev.modbus_ip + \"!\",\n            \"error\": err.code\n         });\n         socket.end();\n         recon.end();\n         net.Socket('close');\n      }\n      console.log(err)\n      socket.end();\n      recon.end();\n      net.Socket('close');\n   });\n   socket.connect(options);\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 680,
        "wires": [
            [
                "ee90c10960398048"
            ]
        ]
    },
    {
        "id": "2fac056483878cd0",
        "type": "delay",
        "z": "15077c63cf28a6b8",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.3",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 625,
        "y": 680,
        "wires": [
            [
                "ecf4f9ea3de5868b"
            ]
        ],
        "l": false
    },
    {
        "id": "b522c8c74419379f",
        "type": "function",
        "z": "15077c63cf28a6b8",
        "name": "Atribui variaveis [MODBUS]",
        "func": "var d = new Date()\nvar hora = (d.getHours()+\":\"+d.getMinutes()+\":\"+d.getSeconds()+\":\"+d.getMilliseconds())\n\nflow.set(\"hora\", hora)\nflow.set(\"d\", d)\n\nmsg.payload = d\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 800,
        "wires": [
            [
                "dc339f20bb2e35b9"
            ]
        ]
    },
    {
        "id": "dc339f20bb2e35b9",
        "type": "moment",
        "z": "15077c63cf28a6b8",
        "name": "Timezone",
        "topic": "logica",
        "input": "",
        "inputType": "msg",
        "inTz": "America/Sao_Paulo",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "YYYY-MM-DDTHH:mm:ss.SSSSSSSZ",
        "locale": "C",
        "output": "",
        "outputType": "msg",
        "outTz": "America/Sao_Paulo",
        "x": 680,
        "y": 800,
        "wires": [
            [
                "6a749c2cc2bddb04"
            ]
        ]
    },
    {
        "id": "27b9cecfe0e2da58",
        "type": "comment",
        "z": "15077c63cf28a6b8",
        "name": "Escreve o arquivo de sai­da e modifica o arquivo dadosIniciais.json",
        "info": "",
        "x": 280,
        "y": 740,
        "wires": []
    },
    {
        "id": "dbad01ec8f248a8f",
        "type": "subflow:9ff0a16ac9766cb5",
        "z": "15077c63cf28a6b8",
        "name": "dadosIniciaisVariaveis.json",
        "x": 220,
        "y": 800,
        "wires": [
            [
                "b522c8c74419379f"
            ]
        ]
    },
    {
        "id": "ab842b1053b5c999",
        "type": "link out",
        "z": "15077c63cf28a6b8",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "57a213c7fef1bc03",
            "298b667fecb0214b"
        ],
        "x": 1075,
        "y": 680,
        "wires": []
    },
    {
        "id": "57a213c7fef1bc03",
        "type": "link in",
        "z": "15077c63cf28a6b8",
        "name": "link in 3",
        "links": [
            "ab842b1053b5c999",
            "b301c2a9104dbe1a"
        ],
        "x": 55,
        "y": 800,
        "wires": [
            [
                "dbad01ec8f248a8f"
            ]
        ]
    },
    {
        "id": "c0019415da88e48d",
        "type": "link in",
        "z": "15077c63cf28a6b8",
        "name": "link in 4",
        "links": [
            "6a749c2cc2bddb04",
            "35df115a194d23a2"
        ],
        "x": 55,
        "y": 860,
        "wires": [
            [
                "a84c02da80b4786f",
                "5b9acf58b29ffb2b"
            ]
        ]
    },
    {
        "id": "6a749c2cc2bddb04",
        "type": "link out",
        "z": "15077c63cf28a6b8",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "c0019415da88e48d",
            "3e216ee42b49f791"
        ],
        "x": 775,
        "y": 800,
        "wires": []
    },
    {
        "id": "ee90c10960398048",
        "type": "function",
        "z": "15077c63cf28a6b8",
        "name": "Sai­da [MODBUS]",
        "func": "let CodVarDI = global.get('CodVarDI');\nlet addressOrigem = global.get('Address');\nlet hostOrigem = global.get('Host');\nlet posLeiturasPeriodicas = flow.get('posLeiturasPeriodicas');\nlet posLeitura = [];\nlet ip = msg.host;\nlet port = msg.port;\nlet address = msg.address;\nlet contador = flow.get('contador');\nlet leitura = flow.get('leitura');\n\n// verifica informaçoes\nfor(let i in hostOrigem)\n{\n    if(ip == hostOrigem[i])\n    {\n        if(address == addressOrigem[i])\n        {\n            if (posLeiturasPeriodicas == i)\n            {\n                leitura = msg.payload;\n                flow.set(\"contador\", contador);\n                flow.set(\"leitura\", leitura);\n    \n                msg.payload = leitura\n\n                flow.set(\"aguarda\", false)\n                return msg;\n            }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 680,
        "wires": [
            [
                "ab842b1053b5c999"
            ]
        ]
    },
    {
        "id": "cdad6812710ab177",
        "type": "inject",
        "z": "15077c63cf28a6b8",
        "name": "Reset Inicio",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 65,
        "y": 100,
        "wires": [
            [
                "9623545f5f4a9add"
            ]
        ],
        "l": false
    },
    {
        "id": "9623545f5f4a9add",
        "type": "function",
        "z": "15077c63cf28a6b8",
        "name": "Reset nmsg",
        "func": "flow.set(\"aguarda2\", false);\nflow.set(\"aguarda\", false);\nflow.set(\"periodica\", false);\nflow.set(\"leitura\", []);\nglobal.set(\"posIgnore\", []);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 115,
        "y": 100,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "c773a3c4f09adcdc",
        "type": "status",
        "z": "15077c63cf28a6b8",
        "name": "",
        "scope": [
            "28ef3692ef123088"
        ],
        "x": 65,
        "y": 140,
        "wires": [
            [
                "1d291dedcc9bd520"
            ]
        ],
        "l": false
    },
    {
        "id": "1d291dedcc9bd520",
        "type": "function",
        "z": "15077c63cf28a6b8",
        "name": "Reset nmsg",
        "func": "flow.set(\"reset\", false);\nif(Number(msg.status.text) > 200)\n{\n    flow.set(\"reset\", true);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 115,
        "y": 140,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "cbd29c003854d905",
        "type": "comment",
        "z": "15077c63cf28a6b8",
        "name": "INICIALIZAÇÃO",
        "info": "",
        "x": 120,
        "y": 20,
        "wires": []
    },
    {
        "id": "b8245f822cec4226",
        "type": "function",
        "z": "15077c63cf28a6b8",
        "name": "Envia saida [MODBUS]",
        "func": "let json = new Array();\n\nlet leitura2 = flow.get('leitura2');\nlet TipConexao = global.get('TipConexaoVar');\nlet CodVariavelLeitura = global.get('CodVariavelLeituraVar');\nlet ValMuitoBaixo = global.get('ValMuitoBaixoVar');\nlet ValBaixo = global.get('ValBaixoVar');\nlet ValAlto = global.get('ValAltoVar');\nlet ValMuitoAlto = global.get('ValMuitoAltoVar');\nlet NumCasasDecimais = global.get('NumCasasDecimaisVar');\nlet ValEscala = global.get('ValEscalaVar');\nlet CodUnidadeEmpresa = global.get('CodUnidadeEmpresaVar');\nlet TipAlarmeDigital = global.get('TipAlarmeDigitalVar');\nlet TipVariavelLeitura = global.get('TipVariavelLeituraVar');\nlet TipMonitoracaoPeriodico = global.get('TipMonitoracaoPeriodicoVar');\nlet posEventosLeitura = flow.get('posEventosLeitura');\n\nvar hora = flow.get('hora2');\nvar data = msg.payload;\n\nconst DataAtualHoraNova = hora;\nconst DataVariavelLeituraHoraNova = hora;\nconst DataVariavelLeituraDiaNova = data;\n\nflow.set(\"DataVariavelLeituraHoraNova2\", DataVariavelLeituraHoraNova);\nflow.set(\"DataVariavelLeituraDiaNova2\", DataVariavelLeituraDiaNova);\nflow.set(\"DataAtualHoraNova2\", DataAtualHoraNova);\n\nlet TipFuncionando = global.get('TipFuncionandoVar');\nlet CodAreaProcessoAPF = global.get('CodAreaProcessoAPF');\nlet CodAreaProcesso = global.get('CodAreaProcessoVar');\n\nlet escreveu2 = false;\n\nif(posEventosLeitura != null && msg.payload != null)\n{\n    for(let key in posEventosLeitura)\n    {\n        if(TipVariavelLeitura[posEventosLeitura[key]] == 1 || TipVariavelLeitura[posEventosLeitura[key]] == 2)\n        {\n            if(leitura2.length > 1)\n            {\n                for(let pos in leitura2)\n                {\n                    leitura2[pos] = leitura2[pos].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n                }\n            } else\n            {\n                leitura2 = leitura2[0].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n            }\n\n            ValMuitoBaixo[posEventosLeitura[key]] = ValMuitoBaixo[posEventosLeitura[key]].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n            ValBaixo[posEventosLeitura[key]] = ValBaixo[posEventosLeitura[key]].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n            ValAlto[posEventosLeitura[key]] = ValAlto[posEventosLeitura[key]].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n            ValMuitoAlto[posEventosLeitura[key]] = ValMuitoAlto[posEventosLeitura[key]].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n\n            if (CodAreaProcesso[posEventosLeitura[key]] == CodAreaProcessoAPF[posEventosLeitura[key]]) {\n                TipFuncionando[posEventosLeitura[key]] = true\n            }\n            \n            json = {\n                \"CodVariavelLeitura\": CodVariavelLeitura[posEventosLeitura[key]],\n                \"ValMuitoBaixo\": parseFloat(ValMuitoBaixo[posEventosLeitura[key]]),\n                \"ValBaixo\": parseFloat(ValBaixo[posEventosLeitura[key]]),\n                \"ValVariavelLeitura\": parseFloat(leitura2),\n                \"ValVariavelLeituraString\": null,\n                \"ValAlto\": parseFloat(ValAlto[posEventosLeitura[key]]),\n                \"ValMuitoAlto\": parseFloat(ValMuitoAlto[posEventosLeitura[key]]),\n                \"TipFuncionando\": TipFuncionando[posEventosLeitura[key]],\n                \"DataVariavelLeitura\": DataVariavelLeituraDiaNova,\n                \"TipMonitoracaoPeriodico\": TipMonitoracaoPeriodico[posEventosLeitura[key]]\n            };\n        } else if(TipVariavelLeitura[posEventosLeitura[key]] == 3 || TipVariavelLeitura[posEventosLeitura[key]] == 4) \n        {\n            if(leitura2.length == 1)\n            {\n                json = {\n                    \"CodVariavelLeitura\": CodVariavelLeitura[posEventosLeitura[key]],\n                    \"ValMuitoBaixo\": ValMuitoBaixo[posEventosLeitura[key]],\n                    \"ValBaixo\": ValBaixo[posEventosLeitura[key]],\n                    \"ValVariavelLeitura\": null,\n                    \"ValVariavelLeituraString\": leitura2[0],\n                    \"ValAlto\": ValAlto[posEventosLeitura[key]],\n                    \"ValMuitoAlto\": ValMuitoAlto[posEventosLeitura[key]],\n                    \"TipFuncionando\": TipFuncionando[posEventosLeitura[key]],\n                    \"DataVariavelLeituraDia\": DataVariavelLeituraDiaNova,\n                    \"TipMonitoracaoPeriodico\": TipMonitoracaoPeriodico[posEventosLeitura[key]]\n                };\n            } \n            else if(leitura2.length > 1)\n            {\n                json = {\n                    \"CodVariavelLeitura\": CodVariavelLeitura[posEventosLeitura[key]],\n                    \"ValMuitoBaixo\": ValMuitoBaixo[posEventosLeitura[key]],\n                    \"ValBaixo\": ValBaixo[posEventosLeitura[key]],\n                    \"ValVariavelLeitura\": null,\n                    \"ValVariavelLeituraString\": leitura2,\n                    \"ValAlto\": ValAlto[posEventosLeitura[key]],\n                    \"ValMuitoAlto\": ValMuitoAlto[posEventosLeitura[key]],\n                    \"TipFuncionando\": TipFuncionando[posEventosLeitura[key]],\n                    \"DataVariavelLeituraDia\": DataVariavelLeituraDiaNova,\n                    \"TipMonitoracaoPeriodico\": TipMonitoracaoPeriodico[posEventosLeitura[key]]\n                };\n            }\n        }\n    }\n}\n\nmsg.payload = json;\nif(msg.payload != null){\n    escreveu2 = true\n    flow.set(\"escreveu2\", escreveu2)\n    /* node.warn(\"Eventos  MODBUS 2\");\n    node.warn(new Date().getTime()); */\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 480,
        "wires": [
            [
                "b1c18434b4ab4a11"
            ]
        ]
    },
    {
        "id": "b1c18434b4ab4a11",
        "type": "link out",
        "z": "15077c63cf28a6b8",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "2455f8aca7392015"
        ],
        "x": 355,
        "y": 480,
        "wires": []
    },
    {
        "id": "69f62dc96ff2b22a",
        "type": "function",
        "z": "15077c63cf28a6b8",
        "name": "Altera ultima leitura [MODBUS]",
        "func": "const fs = global.get('fs').promises;\nlet obj;\nlet json;\nlet filePath = \"C:/Users/Nexxus/Desktop/Node-RED/archives/dadosIniciaisEventosVariaveis.json\";\nlet data = msg.payload\nlet hora = flow.get('hora')\nlet posEventosLeitura = flow.get('posEventosLeitura')\nlet posEventos = flow.get('posEventos')\nlet linha = []\nlet CodVariavelLeitura = global.get('CodVarDI')\nlet DataVariavelLeituraHora = flow.get('DataVariavelLeituraHora')\nlet DataVariavelLeituraDiaAntiga = flow.get('DataVariavelLeituraDiaAntiga')\nlet DataAtualHora = flow.get('DataAtualHora')\nlet leitura2 = flow.get('leitura2')\n\nasync function readFile(filePath) {\n    try {\n        const data = await fs.readFile(filePath);\n        console.log(JSON.parse(data));\n        // node.warn(JSON.parse(data));\n        obj = JSON.parse(data);\n        for (const json of obj) {\n            node.warn(\"posEventosLeitura\" + posEventosLeitura)\n            for(let i in json.ListaAdicionaEventosVariaveis)\n                if (json.ListaAdicionaEventosVariaveis[i].CodVariavelLeitura === CodVariavelLeitura[posEventosLeitura[i]]) {\n                    json.ListaAdicionaEventosVariaveis[i].UltimoValLeitura = leitura2[0];\n\n                    break;\n                }\n        }\n        json = JSON.stringify(obj);\n        // node.warn(json)\n        fs.writeFile(filePath, json, 'utf8', function (err) {\n            if (err) throw err;\n            console.log('complete');\n        }\n        );\n        msg.payload = obj[obj.length];\n        node.send(msg);\n    } catch (error) {\n        console.error(`Got an error trying to read the file: ${error.message}`);\n        node.error(`Got an error trying to read the file: ${error.message}`);\n    }\n}\n\nreadFile(filePath);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "5b9acf58b29ffb2b",
        "type": "function",
        "z": "15077c63cf28a6b8",
        "name": "Envia saida [MODBUS]",
        "func": "let json = new Array();\n\nlet leitura = flow.get('leitura');\nlet TipConexao = global.get('TipConexaoVar');\nlet CodVariavelLeitura = global.get('CodVariavelLeituraVar');\nlet ValMuitoBaixo = global.get('ValMuitoBaixoVar');\nlet ValBaixo = global.get('ValBaixoVar');\nlet ValAlto = global.get('ValAltoVar');\nlet ValMuitoAlto = global.get('ValMuitoAltoVar');\nlet NumCasasDecimais = global.get('NumCasasDecimaisVar');\nlet ValEscala = global.get('ValEscalaVar');\nlet CodUnidadeEmpresa = global.get('CodUnidadeEmpresaVar');\nlet TipAlarmeDigital = global.get('TipAlarmeDigitalVar');\nlet TipVariavelLeitura = global.get('TipVariavelLeituraVar');\nlet TipMonitoracaoPeriodico = global.get('TipMonitoracaoPeriodicoVar');\n\nvar hora = flow.get('hora');\nvar data = msg.payload;\n\nconst DataAtualHoraNova = hora;\nconst DataVariavelLeituraHoraNova = hora;\nconst DataVariavelLeituraDiaNova = data;\n\nflow.set(\"DataVariavelLeituraHoraNova\", DataVariavelLeituraHoraNova);\nflow.set(\"DataVariavelLeituraDiaNova\", DataVariavelLeituraDiaNova);\nflow.set(\"DataAtualHoraNova\", DataAtualHoraNova);\n\nlet posLeiturasPeriodicas = flow.get('posLeiturasPeriodicas');\n\nlet TipFuncionando = global.get('TipFuncionandoVar');\nlet CodAreaProcessoAPF = global.get('CodAreaProcessoAPF');\nlet CodAreaProcesso = global.get('CodAreaProcessoVar');\n\nlet escreveu = false;\n\nif (posLeiturasPeriodicas != null && msg.payload != null)\n{   \n    if (TipVariavelLeitura[posLeiturasPeriodicas] == 1 || TipVariavelLeitura[posLeiturasPeriodicas] == 2)\n    {\n        if(typeof(leitura) == typeof(2) || typeof(leitura) == typeof(true))\n        {\n            if (typeof (leitura) != typeof (true)) {\n                leitura = leitura.toFixed(NumCasasDecimais[posLeiturasPeriodicas]);\n                leitura = parseFloat(leitura);\n            }\n\n            ValMuitoBaixo[posLeiturasPeriodicas] = ValMuitoBaixo[posLeiturasPeriodicas].toFixed(NumCasasDecimais[posLeiturasPeriodicas]);\n            ValBaixo[posLeiturasPeriodicas] = ValBaixo[posLeiturasPeriodicas].toFixed(NumCasasDecimais[posLeiturasPeriodicas]);\n            ValAlto[posLeiturasPeriodicas] = ValAlto[posLeiturasPeriodicas].toFixed(NumCasasDecimais[posLeiturasPeriodicas]);\n            ValMuitoAlto[posLeiturasPeriodicas] = ValMuitoAlto[posLeiturasPeriodicas].toFixed(NumCasasDecimais[posLeiturasPeriodicas]);\n\n            if (CodAreaProcesso[posLeiturasPeriodicas] == CodAreaProcessoAPF[posLeiturasPeriodicas]) {\n                TipFuncionando[posLeiturasPeriodicas] = true;\n            }\n\n            json = {\n                \"CodVariavelLeitura\": CodVariavelLeitura[posLeiturasPeriodicas],\n                \"ValMuitoBaixo\": parseFloat(ValMuitoBaixo[posLeiturasPeriodicas]),\n                \"ValBaixo\": parseFloat(ValBaixo[posLeiturasPeriodicas]),\n                \"ValVariavelLeitura\": leitura,\n                \"ValVariavelLeituraString\": null,\n                \"ValAlto\": parseFloat(ValAlto[posLeiturasPeriodicas]),\n                \"ValMuitoAlto\": parseFloat(ValMuitoAlto[posLeiturasPeriodicas]),\n                \"TipFuncionando\": TipFuncionando[posLeiturasPeriodicas],\n                \"DataVariavelLeitura\": DataVariavelLeituraDiaNova,\n                \"TipMonitoracaoPeriodico\": TipMonitoracaoPeriodico[posLeiturasPeriodicas]\n            };\n        }\n    } else if (TipVariavelLeitura[posLeiturasPeriodicas] == 3 || TipVariavelLeitura[posLeiturasPeriodicas] == 4) {\n        if (typeof (leitura) == typeof (\"string\")) {\n            json = {\n                \"CodVariavelLeitura\": CodVariavelLeitura[posLeiturasPeriodicas],\n                \"ValMuitoBaixo\": ValMuitoBaixo[posLeiturasPeriodicas],\n                \"ValBaixo\": ValBaixo[posLeiturasPeriodicas],\n                \"ValVariavelLeitura\": null,\n                \"ValVariavelLeituraString\": leitura,\n                \"ValAlto\": ValAlto[posLeiturasPeriodicas],\n                \"ValMuitoAlto\": ValMuitoAlto[posLeiturasPeriodicas],\n                \"TipFuncionando\": TipFuncionando[posLeiturasPeriodicas],\n                \"DataVariavelLeituraDia\": DataVariavelLeituraDiaNova,\n                \"TipMonitoracaoPeriodico\": TipMonitoracaoPeriodico[posLeiturasPeriodicas]\n            };\n        }\n    }\n}\n\nmsg.payload = json;\n\nif(msg.payload != null)\n{\n    escreveu = true\n    flow.set(\"escreveu\", escreveu);\n    flow.set(\"leitura\", [])\n    /* node.warn(\"Periodicas MODBUS 2\");\n    node.warn(new Date().getTime()); */\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 860,
        "wires": [
            [
                "69854bee471572cd",
                "82c54b861c6c461d"
            ]
        ]
    },
    {
        "id": "69854bee471572cd",
        "type": "link out",
        "z": "15077c63cf28a6b8",
        "name": "link out 20",
        "mode": "link",
        "links": [
            "7f77ed8b0afce9c1"
        ],
        "x": 375,
        "y": 860,
        "wires": []
    },
    {
        "id": "a84c02da80b4786f",
        "type": "function",
        "z": "15077c63cf28a6b8",
        "name": "Altera data [MODBUS]",
        "func": "const fs = global.get('fs').promises;\nlet obj;\nlet json;\nlet dia = msg.payload;\nlet hora = flow.get('hora');\nlet posLeiturasPeriodicas = flow.get('posLeiturasPeriodicas');\nlet CodVariavelLeitura = global.get('CodVarDI');\nlet DataVariavelLeituraDiaAntiga = global.get('DataVariavelLeituraDiaAntiga');\nlet DataVariavelLeituraHora = global.get('DataVariavelLeituraHora');\nlet DataAtualHora = global.get('DataAtualHora');\nlet filePath = 'C:/Users/Nexxus/Desktop/Node-RED/archives/dadosIniciais.json';\n\nasync function readFile(filePath) {\n    try {\n        const data = await fs.readFile(filePath);\n        //console.log(JSON.parse(data));\n        // node.warn(JSON.parse(data));\n        obj = JSON.parse(data);\n        for (const json of obj) {\n            node.warn(posLeiturasPeriodicas)\n            for(let i in json.ListaMonitoraGruposPeriodicos){\n                node.warn(json.ListaMonitoraGruposPeriodicos[i].CodVariavelLeitura == CodVariavelLeitura[posLeiturasPeriodicas])\n                if (json.ListaMonitoraGruposPeriodicos[i].CodVariavelLeitura == CodVariavelLeitura[posLeiturasPeriodicas]) {\n                    json.ListaMonitoraGruposPeriodicos[i].DataVariavelLeituraDia = dia;\n                    json.ListaMonitoraGruposPeriodicos[i].DataVariavelLeituraHora = hora;\n                    json.ListaMonitoraGruposPeriodicos[i].DataAtualHora = hora;\n\n                    break;\n                }\n            }\n        }\n        if (obj != null) \n        {\n            json = JSON.stringify(obj);\n        }\n        // node.warn(json)\n        if(json != null){\n            \n            fs.writeFile(filePath, json, 'utf8', function (error) {\n                if (error) {\n                    console.error(`Got an error trying to write the file: ${error.message}`);\n                    node.error(`Got an error trying to write the file: ${error.message}`);\n                }\n                //console.log('complete');\n            }\n            );\n            msg.payload = obj[obj.length];\n            node.send(msg);\n        }\n\n        for (let pos in CodVariavelLeitura) {\n            if (pos == posLeiturasPeriodicas) {\n                DataVariavelLeituraDiaAntiga[pos] = dia;\n                global.set(\"DataVariavelLeituraDiaAntiga\", DataVariavelLeituraDiaAntiga);\n\n                DataVariavelLeituraHora[pos] = hora;\n                global.set(\"DataVariavelLeituraHora\", DataVariavelLeituraHora);\n\n                DataAtualHora[pos] = hora;\n                global.set(\"DataAtualHora\", DataAtualHora);\n            }\n        }\n    } catch (error) {\n        console.error(`Got an error trying to read the file: ${error.message}`);\n        node.error(`Got an error trying to read the file: ${error.message}`);\n    }\n}\n\nreadFile(filePath);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "63359309fd2285f3",
        "type": "link in",
        "z": "15077c63cf28a6b8",
        "name": "link in 19",
        "links": [
            "c571d1348be81673"
        ],
        "x": 65,
        "y": 60,
        "wires": [
            [
                "9623545f5f4a9add"
            ]
        ]
    },
    {
        "id": "82c54b861c6c461d",
        "type": "debug",
        "z": "15077c63cf28a6b8",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 900,
        "wires": []
    },
    {
        "id": "14f523bc7a2808b8",
        "type": "comment",
        "z": "15077c63cf28a6b8",
        "name": "",
        "info": "[\n    {\n        \"ListaMonitoraGruposPeriodicos\": [\n            {\n                \"TipConexao\": \"TCP\",\n                \"Host\": \"10.255.3.214\",\n                \"Porta\": 502,\n                \"Fc\": 3,\n                \"Address\": 0,\n                \"Quantity\": 1,\n                \"Unitid\": 1,\n                \"TipUnidadePeriodo\": 1,\n                \"ValPeriodo\": 60,\n                \"CodVariavelLeitura\": 1,\n                \"DataVariavelLeituraHora\": \"14:6:26:589\",\n                \"DataVariavelLeituraDia\": \"2022-10-13T14:06:26.5890000-03:00\",\n                \"DataAtualHora\": \"14:6:26:589\",\n                \"TipVariavelLeitura\": 2\n            },\n            {\n                \"TipConexao\": \"SIEMENS\",\n                \"Host\": \"10.255.3.214\",\n                \"Porta\": 102,\n                \"Rack\": 0,\n                \"Slot\": 1,\n                \"Data\": \"Q0.0\",\n                \"Quantity\": 1,\n                \"TipUnidadePeriodo\": 1,\n                \"ValPeriodo\": 30,\n                \"CodVariavelLeitura\": 2,\n                \"DataVariavelLeituraHora\": \"14:6:51:634\",\n                \"DataVariavelLeituraDia\": \"2022-10-13T14:06:51.6340000-03:00\",\n                \"DataAtualHora\": \"14:6:51:634\",\n                \"TipVariavelLeitura\": 3\n            },\n            {\n                \"TipConexao\": \"ROCKWELL\",\n                \"Host\": \"10.255.11.19\",\n                \"CPUSlot\": 0,\n                \"EthernetSlot\": 1,\n                \"TagName\": \"TesteFloat\",\n                \"ProgName\": null,\n                \"DataType\": \"REAL\",\n                \"TipUnidadePeriodo\": 1,\n                \"ValPeriodo\": 45,\n                \"CodVariavelLeitura\": 3,\n                \"DataVariavelLeituraHora\": \"19:44:34:707\",\n                \"DataVariavelLeituraDia\": \"2022-10-11T19:44:34.7070000-03:00\",\n                \"DataAtualHora\": \"19:44:34:707\",\n                \"TipVariavelLeitura\": 2\n            },\n            {\n                \"TipConexao\": \"TCP\",\n                \"Host\": \"10.255.3.214\",\n                \"Porta\": 502,\n                \"Fc\": 3,\n                \"Address\": 1,\n                \"Quantity\": 1,\n                \"Unitid\": 1,\n                \"TipUnidadePeriodo\": 1,\n                \"ValPeriodo\": 90,\n                \"CodVariavelLeitura\": 23,\n                \"DataVariavelLeituraHora\": \"14:6:26:589\",\n                \"DataVariavelLeituraDia\": \"2022-10-13T14:06:26.5890000-03:00\",\n                \"DataAtualHora\": \"14:6:26:589\",\n                \"TipVariavelLeitura\": 2\n            },\n            {\n                \"TipConexao\": \"SIEMENS\",\n                \"Host\": \"10.255.3.214\",\n                \"Porta\": 102,\n                \"Rack\": 0,\n                \"Slot\": 1,\n                \"Data\": \"Q0.1\",\n                \"Quantity\": 1,\n                \"TipUnidadePeriodo\": 1,\n                \"ValPeriodo\": 45,\n                \"CodVariavelLeitura\": 24,\n                \"DataVariavelLeituraHora\": \"14:6:51:634\",\n                \"DataVariavelLeituraDia\": \"2022-10-13T14:06:51.6340000-03:00\",\n                \"DataAtualHora\": \"14:6:51:634\",\n                \"TipVariavelLeitura\": 3\n            },\n            {\n                \"TipConexao\": \"ROCKWELL\",\n                \"Host\": \"10.255.11.19\",\n                \"CPUSlot\": 0,\n                \"EthernetSlot\": 1,\n                \"TagName\": \"TesteDINT\",\n                \"ProgName\": null,\n                \"DataType\": \"DINT\",\n                \"TipUnidadePeriodo\": 1,\n                \"ValPeriodo\": 60,\n                \"CodVariavelLeitura\": 25,\n                \"DataVariavelLeituraHora\": \"19:44:34:707\",\n                \"DataVariavelLeituraDia\": \"2022-10-11T19:44:34.7070000-03:00\",\n                \"DataAtualHora\": \"19:44:34:707\",\n                \"TipVariavelLeitura\": 2\n            },\n            {\n                \"TipConexao\": \"TCP\",\n                \"Host\": \"10.255.3.214\",\n                \"Porta\": 502,\n                \"Fc\": 3,\n                \"Address\": 2,\n                \"Quantity\": 1,\n                \"Unitid\": 1,\n                \"TipUnidadePeriodo\": 1,\n                \"ValPeriodo\": 45,\n                \"CodVariavelLeitura\": 26,\n                \"DataVariavelLeituraHora\": \"14:6:26:589\",\n                \"DataVariavelLeituraDia\": \"2022-10-13T14:06:26.5890000-03:00\",\n                \"DataAtualHora\": \"14:6:26:589\",\n                \"TipVariavelLeitura\": 2\n            },\n            {\n                \"TipConexao\": \"SIEMENS\",\n                \"Host\": \"10.255.3.214\",\n                \"Porta\": 102,\n                \"Rack\": 0,\n                \"Slot\": 1,\n                \"Data\": \"Q0.2\",\n                \"Quantity\": 1,\n                \"TipUnidadePeriodo\": 1,\n                \"ValPeriodo\": 90,\n                \"CodVariavelLeitura\": 27,\n                \"DataVariavelLeituraHora\": \"14:6:51:634\",\n                \"DataVariavelLeituraDia\": \"2022-10-13T14:06:51.6340000-03:00\",\n                \"DataAtualHora\": \"14:6:51:634\",\n                \"TipVariavelLeitura\": 3\n            },\n            {\n                \"TipConexao\": \"ROCKWELL\",\n                \"Host\": \"10.255.11.19\",\n                \"CPUSlot\": 0,\n                \"EthernetSlot\": 1,\n                \"TagName\": \"TesteINT\",\n                \"ProgName\": null,\n                \"DataType\": \"INT\",\n                \"TipUnidadePeriodo\": 1,\n                \"ValPeriodo\": 120,\n                \"CodVariavelLeitura\": 28,\n                \"DataVariavelLeituraHora\": \"19:44:34:707\",\n                \"DataVariavelLeituraDia\": \"2022-10-11T19:44:34.7070000-03:00\",\n                \"DataAtualHora\": \"19:44:34:707\",\n                \"TipVariavelLeitura\": 2\n            },\n            {\n                \"TipConexao\": \"TCP\",\n                \"Host\": \"10.255.3.214\",\n                \"Porta\": 502,\n                \"Fc\": 3,\n                \"Address\": 3,\n                \"Quantity\": 1,\n                \"Unitid\": 1,\n                \"TipUnidadePeriodo\": 1,\n                \"ValPeriodo\": 60,\n                \"CodVariavelLeitura\": 29,\n                \"DataVariavelLeituraHora\": \"14:6:26:589\",\n                \"DataVariavelLeituraDia\": \"2022-10-13T14:06:26.5890000-03:00\",\n                \"DataAtualHora\": \"14:6:26:589\",\n                \"TipVariavelLeitura\": 2\n            },\n            {\n                \"TipConexao\": \"SIEMENS\",\n                \"Host\": \"10.255.3.214\",\n                \"Porta\": 102,\n                \"Rack\": 0,\n                \"Slot\": 1,\n                \"Data\": \"Q0.3\",\n                \"Quantity\": 1,\n                \"TipUnidadePeriodo\": 1,\n                \"ValPeriodo\": 30,\n                \"CodVariavelLeitura\": 30,\n                \"DataVariavelLeituraHora\": \"14:6:51:634\",\n                \"DataVariavelLeituraDia\": \"2022-10-13T14:06:51.6340000-03:00\",\n                \"DataAtualHora\": \"14:6:51:634\",\n                \"TipVariavelLeitura\": 3\n            },\n            {\n                \"TipConexao\": \"ROCKWELL\",\n                \"Host\": \"10.255.11.19\",\n                \"CPUSlot\": 0,\n                \"EthernetSlot\": 1,\n                \"TagName\": \"TesteFloat\",\n                \"ProgName\": null,\n                \"DataType\": \"REAL\",\n                \"TipUnidadePeriodo\": 1,\n                \"ValPeriodo\": 45,\n                \"CodVariavelLeitura\": 31,\n                \"DataVariavelLeituraHora\": \"19:44:34:707\",\n                \"DataVariavelLeituraDia\": \"2022-10-11T19:44:34.7070000-03:00\",\n                \"DataAtualHora\": \"19:44:34:707\",\n                \"TipVariavelLeitura\": 2\n            },\n            {\n                \"TipConexao\": \"TCP\",\n                \"Host\": \"10.255.3.214\",\n                \"Porta\": 502,\n                \"Fc\": 3,\n                \"Address\": 4,\n                \"Quantity\": 1,\n                \"Unitid\": 1,\n                \"TipUnidadePeriodo\": 1,\n                \"ValPeriodo\": 80,\n                \"CodVariavelLeitura\": 32,\n                \"DataVariavelLeituraHora\": \"14:6:26:589\",\n                \"DataVariavelLeituraDia\": \"2022-10-13T14:06:26.5890000-03:00\",\n                \"DataAtualHora\": \"14:6:26:589\",\n                \"TipVariavelLeitura\": 2\n            },\n            {\n                \"TipConexao\": \"SIEMENS\",\n                \"Host\": \"10.255.3.214\",\n                \"Porta\": 102,\n                \"Rack\": 0,\n                \"Slot\": 1,\n                \"Data\": \"Q0.4\",\n                \"Quantity\": 1,\n                \"TipUnidadePeriodo\": 1,\n                \"ValPeriodo\": 20,\n                \"CodVariavelLeitura\": 33,\n                \"DataVariavelLeituraHora\": \"14:6:51:634\",\n                \"DataVariavelLeituraDia\": \"2022-10-13T14:06:51.6340000-03:00\",\n                \"DataAtualHora\": \"14:6:51:634\",\n                \"TipVariavelLeitura\": 3\n            },\n            {\n                \"TipConexao\": \"ROCKWELL\",\n                \"Host\": \"10.255.11.19\",\n                \"CPUSlot\": 0,\n                \"EthernetSlot\": 1,\n                \"TagName\": \"TesteDINT\",\n                \"ProgName\": null,\n                \"DataType\": \"DINT\",\n                \"TipUnidadePeriodo\": 1,\n                \"ValPeriodo\": 50,\n                \"CodVariavelLeitura\": 34,\n                \"DataVariavelLeituraHora\": \"19:44:34:707\",\n                \"DataVariavelLeituraDia\": \"2022-10-11T19:44:34.7070000-03:00\",\n                \"DataAtualHora\": \"19:44:34:707\",\n                \"TipVariavelLeitura\": 2\n            }\n\t    ]\n    }\n]",
        "x": 840,
        "y": 140,
        "wires": []
    },
    {
        "id": "66b8d08042dedd44",
        "type": "comment",
        "z": "15077c63cf28a6b8",
        "name": "",
        "info": "[\n\t{\n\t\t\"ListaRetornaDadosVariavel\": [\n\t\t\t{\n\t\t\t\t\"TipConexao\": \"TCP\",\n\t\t\t\t\"CodVariavelLeitura\": 1,\n\t\t\t\t\"ValMuitoBaixo\": 0.0,\n\t\t\t\t\"ValBaixo\": 0.5,\n\t\t\t\t\"ValAlto\": 2.0,\n\t\t\t\t\"ValMuitoAlto\": 3.0,\n\t\t\t\t\"NumCasasDecimais\": 1,\n\t\t\t\t\"TipVariavelLeituraOPC\": false,\n\t\t\t\t\"ValEscala\": 1,\n\t\t\t\t\"CodAreaProcesso\": 1,\n\t\t\t\t\"CodUnidadeEmpresa\": 1,\n\t\t\t\t\"TipAlarmeDigital\": false,\n\t\t\t\t\"TipVariavelLeitura\": 2,\n\t\t\t\t\"TipMonitoracaoPeriodico\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"TipConexao\": \"SIEMENS\",\n\t\t\t\t\"CodVariavelLeitura\": 2,\n\t\t\t\t\"ValMuitoBaixo\": 1.00,\n\t\t\t\t\"ValBaixo\": 1.50,\n\t\t\t\t\"ValAlto\": 3.00,\n\t\t\t\t\"ValMuitoAlto\": 4.00,\n\t\t\t\t\"NumCasasDecimais\": 2,\n\t\t\t\t\"TipVariavelLeituraOPC\": false,\n\t\t\t\t\"ValEscala\": 1,\n\t\t\t\t\"CodAreaProcesso\": 2,\n\t\t\t\t\"CodUnidadeEmpresa\": 1,\n\t\t\t\t\"TipAlarmeDigital\": false,\n\t\t\t\t\"TipVariavelLeitura\": 1,\n\t\t\t\t\"TipMonitoracaoPeriodico\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"TipConexao\": \"ROCKWELL\",\n\t\t\t\t\"CodVariavelLeitura\": 3,\n\t\t\t\t\"ValMuitoBaixo\": 1.000,\n\t\t\t\t\"ValBaixo\": 1.500,\n\t\t\t\t\"ValAlto\": 3.000,\n\t\t\t\t\"ValMuitoAlto\": 4.000,\n\t\t\t\t\"NumCasasDecimais\": 3,\n\t\t\t\t\"TipVariavelLeituraOPC\": false,\n\t\t\t\t\"ValEscala\": 1,\n\t\t\t\t\"CodAreaProcesso\": 3,\n\t\t\t\t\"CodUnidadeEmpresa\": 1,\n\t\t\t\t\"TipAlarmeDigital\": false,\n\t\t\t\t\"TipVariavelLeitura\": 2,\n\t\t\t\t\"TipMonitoracaoPeriodico\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"TipConexao\": \"TCP\",\n\t\t\t\t\"CodVariavelLeitura\": 23,\n\t\t\t\t\"ValMuitoBaixo\": 0.0,\n\t\t\t\t\"ValBaixo\": 0.5,\n\t\t\t\t\"ValAlto\": 2.0,\n\t\t\t\t\"ValMuitoAlto\": 3.0,\n\t\t\t\t\"NumCasasDecimais\": 1,\n\t\t\t\t\"TipVariavelLeituraOPC\": false,\n\t\t\t\t\"ValEscala\": 1,\n\t\t\t\t\"CodAreaProcesso\": 4,\n\t\t\t\t\"CodUnidadeEmpresa\": 1,\n\t\t\t\t\"TipAlarmeDigital\": false,\n\t\t\t\t\"TipVariavelLeitura\": 2,\n\t\t\t\t\"TipMonitoracaoPeriodico\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"TipConexao\": \"SIEMENS\",\n\t\t\t\t\"CodVariavelLeitura\": 24,\n\t\t\t\t\"ValMuitoBaixo\": 1.00,\n\t\t\t\t\"ValBaixo\": 1.50,\n\t\t\t\t\"ValAlto\": 3.00,\n\t\t\t\t\"ValMuitoAlto\": 4.00,\n\t\t\t\t\"NumCasasDecimais\": 2,\n\t\t\t\t\"TipVariavelLeituraOPC\": false,\n\t\t\t\t\"ValEscala\": 1,\n\t\t\t\t\"CodAreaProcesso\": 5,\n\t\t\t\t\"CodUnidadeEmpresa\": 1,\n\t\t\t\t\"TipAlarmeDigital\": false,\n\t\t\t\t\"TipVariavelLeitura\": 1,\n\t\t\t\t\"TipMonitoracaoPeriodico\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"TipConexao\": \"ROCKWELL\",\n\t\t\t\t\"CodVariavelLeitura\": 25,\n\t\t\t\t\"ValMuitoBaixo\": 1.000,\n\t\t\t\t\"ValBaixo\": 1.500,\n\t\t\t\t\"ValAlto\": 3.000,\n\t\t\t\t\"ValMuitoAlto\": 4.000,\n\t\t\t\t\"NumCasasDecimais\": 3,\n\t\t\t\t\"TipVariavelLeituraOPC\": false,\n\t\t\t\t\"ValEscala\": 1,\n\t\t\t\t\"CodAreaProcesso\": 6,\n\t\t\t\t\"CodUnidadeEmpresa\": 1,\n\t\t\t\t\"TipAlarmeDigital\": false,\n\t\t\t\t\"TipVariavelLeitura\": 2,\n\t\t\t\t\"TipMonitoracaoPeriodico\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"TipConexao\": \"TCP\",\n\t\t\t\t\"CodVariavelLeitura\": 26,\n\t\t\t\t\"ValMuitoBaixo\": 0.0,\n\t\t\t\t\"ValBaixo\": 0.5,\n\t\t\t\t\"ValAlto\": 2.0,\n\t\t\t\t\"ValMuitoAlto\": 3.0,\n\t\t\t\t\"NumCasasDecimais\": 1,\n\t\t\t\t\"TipVariavelLeituraOPC\": false,\n\t\t\t\t\"ValEscala\": 1,\n\t\t\t\t\"CodAreaProcesso\": 7,\n\t\t\t\t\"CodUnidadeEmpresa\": 1,\n\t\t\t\t\"TipAlarmeDigital\": false,\n\t\t\t\t\"TipVariavelLeitura\": 2,\n\t\t\t\t\"TipMonitoracaoPeriodico\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"TipConexao\": \"SIEMENS\",\n\t\t\t\t\"CodVariavelLeitura\": 27,\n\t\t\t\t\"ValMuitoBaixo\": 1.00,\n\t\t\t\t\"ValBaixo\": 1.50,\n\t\t\t\t\"ValAlto\": 3.00,\n\t\t\t\t\"ValMuitoAlto\": 4.00,\n\t\t\t\t\"NumCasasDecimais\": 2,\n\t\t\t\t\"TipVariavelLeituraOPC\": false,\n\t\t\t\t\"ValEscala\": 1,\n\t\t\t\t\"CodAreaProcesso\": 8,\n\t\t\t\t\"CodUnidadeEmpresa\": 1,\n\t\t\t\t\"TipAlarmeDigital\": false,\n\t\t\t\t\"TipVariavelLeitura\": 1,\n\t\t\t\t\"TipMonitoracaoPeriodico\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"TipConexao\": \"ROCKWELL\",\n\t\t\t\t\"CodVariavelLeitura\": 28,\n\t\t\t\t\"ValMuitoBaixo\": 1.000,\n\t\t\t\t\"ValBaixo\": 1.500,\n\t\t\t\t\"ValAlto\": 3.000,\n\t\t\t\t\"ValMuitoAlto\": 4.000,\n\t\t\t\t\"NumCasasDecimais\": 3,\n\t\t\t\t\"TipVariavelLeituraOPC\": false,\n\t\t\t\t\"ValEscala\": 1,\n\t\t\t\t\"CodAreaProcesso\": 9,\n\t\t\t\t\"CodUnidadeEmpresa\": 1,\n\t\t\t\t\"TipAlarmeDigital\": false,\n\t\t\t\t\"TipVariavelLeitura\": 2,\n\t\t\t\t\"TipMonitoracaoPeriodico\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"TipConexao\": \"TCP\",\n\t\t\t\t\"CodVariavelLeitura\": 29,\n\t\t\t\t\"ValMuitoBaixo\": 0.0,\n\t\t\t\t\"ValBaixo\": 0.5,\n\t\t\t\t\"ValAlto\": 2.0,\n\t\t\t\t\"ValMuitoAlto\": 3.0,\n\t\t\t\t\"NumCasasDecimais\": 1,\n\t\t\t\t\"TipVariavelLeituraOPC\": false,\n\t\t\t\t\"ValEscala\": 1,\n\t\t\t\t\"CodAreaProcesso\": 1,\n\t\t\t\t\"CodUnidadeEmpresa\": 10,\n\t\t\t\t\"TipAlarmeDigital\": false,\n\t\t\t\t\"TipVariavelLeitura\": 2,\n\t\t\t\t\"TipMonitoracaoPeriodico\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"TipConexao\": \"SIEMENS\",\n\t\t\t\t\"CodVariavelLeitura\": 30,\n\t\t\t\t\"ValMuitoBaixo\": 1.00,\n\t\t\t\t\"ValBaixo\": 1.50,\n\t\t\t\t\"ValAlto\": 3.00,\n\t\t\t\t\"ValMuitoAlto\": 4.00,\n\t\t\t\t\"NumCasasDecimais\": 2,\n\t\t\t\t\"TipVariavelLeituraOPC\": false,\n\t\t\t\t\"ValEscala\": 1,\n\t\t\t\t\"CodAreaProcesso\": 2,\n\t\t\t\t\"CodUnidadeEmpresa\": 11,\n\t\t\t\t\"TipAlarmeDigital\": false,\n\t\t\t\t\"TipVariavelLeitura\": 1,\n\t\t\t\t\"TipMonitoracaoPeriodico\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"TipConexao\": \"ROCKWELL\",\n\t\t\t\t\"CodVariavelLeitura\": 31,\n\t\t\t\t\"ValMuitoBaixo\": 1.000,\n\t\t\t\t\"ValBaixo\": 1.500,\n\t\t\t\t\"ValAlto\": 3.000,\n\t\t\t\t\"ValMuitoAlto\": 4.000,\n\t\t\t\t\"NumCasasDecimais\": 3,\n\t\t\t\t\"TipVariavelLeituraOPC\": false,\n\t\t\t\t\"ValEscala\": 1,\n\t\t\t\t\"CodAreaProcesso\": 12,\n\t\t\t\t\"CodUnidadeEmpresa\": 1,\n\t\t\t\t\"TipAlarmeDigital\": false,\n\t\t\t\t\"TipVariavelLeitura\": 2,\n\t\t\t\t\"TipMonitoracaoPeriodico\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"TipConexao\": \"TCP\",\n\t\t\t\t\"CodVariavelLeitura\": 32,\n\t\t\t\t\"ValMuitoBaixo\": 0.0,\n\t\t\t\t\"ValBaixo\": 0.5,\n\t\t\t\t\"ValAlto\": 2.0,\n\t\t\t\t\"ValMuitoAlto\": 3.0,\n\t\t\t\t\"NumCasasDecimais\": 1,\n\t\t\t\t\"TipVariavelLeituraOPC\": false,\n\t\t\t\t\"ValEscala\": 1,\n\t\t\t\t\"CodAreaProcesso\": 13,\n\t\t\t\t\"CodUnidadeEmpresa\": 1,\n\t\t\t\t\"TipAlarmeDigital\": false,\n\t\t\t\t\"TipVariavelLeitura\": 2,\n\t\t\t\t\"TipMonitoracaoPeriodico\": 2\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"TipConexao\": \"SIEMENS\",\n\t\t\t\t\"CodVariavelLeitura\": 33,\n\t\t\t\t\"ValMuitoBaixo\": 1.00,\n\t\t\t\t\"ValBaixo\": 1.50,\n\t\t\t\t\"ValAlto\": 3.00,\n\t\t\t\t\"ValMuitoAlto\": 4.00,\n\t\t\t\t\"NumCasasDecimais\": 2,\n\t\t\t\t\"TipVariavelLeituraOPC\": false,\n\t\t\t\t\"ValEscala\": 1,\n\t\t\t\t\"CodAreaProcesso\": 14,\n\t\t\t\t\"CodUnidadeEmpresa\": 1,\n\t\t\t\t\"TipAlarmeDigital\": false,\n\t\t\t\t\"TipVariavelLeitura\": 1,\n\t\t\t\t\"TipMonitoracaoPeriodico\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"TipConexao\": \"ROCKWELL\",\n\t\t\t\t\"CodVariavelLeitura\": 34,\n\t\t\t\t\"ValMuitoBaixo\": 1.000,\n\t\t\t\t\"ValBaixo\": 1.500,\n\t\t\t\t\"ValAlto\": 3.000,\n\t\t\t\t\"ValMuitoAlto\": 4.000,\n\t\t\t\t\"NumCasasDecimais\": 3,\n\t\t\t\t\"TipVariavelLeituraOPC\": false,\n\t\t\t\t\"ValEscala\": 1,\n\t\t\t\t\"CodAreaProcesso\": 15,\n\t\t\t\t\"CodUnidadeEmpresa\": 1,\n\t\t\t\t\"TipAlarmeDigital\": false,\n\t\t\t\t\"TipVariavelLeitura\": 2,\n\t\t\t\t\"TipMonitoracaoPeriodico\": 1\n\t\t\t}\n\t\t],\n\t\t\"ListaRetornaAreaProcessoFuncionando\": [\n\t\t\t{\n\t\t\t\t\"CodAreaProcesso\": 1,\n\t\t\t\t\"TipFuncionando\": true\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"CodAreaProcesso\": 2,\n\t\t\t\t\"TipFuncionando\": false\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"CodAreaProcesso\": 3,\n\t\t\t\t\"TipFuncionando\": false\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"CodAreaProcesso\": 4,\n\t\t\t\t\"TipFuncionando\": true\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"CodAreaProcesso\": 5,\n\t\t\t\t\"TipFuncionando\": false\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"CodAreaProcesso\": 6,\n\t\t\t\t\"TipFuncionando\": false\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"CodAreaProcesso\": 7,\n\t\t\t\t\"TipFuncionando\": true\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"CodAreaProcesso\": 8,\n\t\t\t\t\"TipFuncionando\": false\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"CodAreaProcesso\": 9,\n\t\t\t\t\"TipFuncionando\": false\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"CodAreaProcesso\": 10,\n\t\t\t\t\"TipFuncionando\": true\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"CodAreaProcesso\": 11,\n\t\t\t\t\"TipFuncionando\": false\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"CodAreaProcesso\": 12,\n\t\t\t\t\"TipFuncionando\": false\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"CodAreaProcesso\": 13,\n\t\t\t\t\"TipFuncionando\": true\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"CodAreaProcesso\": 14,\n\t\t\t\t\"TipFuncionando\": false\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"CodAreaProcesso\": 15,\n\t\t\t\t\"TipFuncionando\": false\n\t\t\t}\n\t\t]\n\t}\n]",
        "x": 660,
        "y": 140,
        "wires": []
    },
    {
        "id": "b420fd1f8ed1872e",
        "type": "inject",
        "z": "23fefab45ba4d7fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "24dcfe3f1c8bc65f"
            ]
        ]
    },
    {
        "id": "24dcfe3f1c8bc65f",
        "type": "function",
        "z": "23fefab45ba4d7fc",
        "name": "Parametros [SIEMENS]",
        "func": "// dadosIniciaisEventosVariaveis.json\nvar CodVarEvento = global.get('CodVarEvento');\nvar posEventos = [];\nvar pos = [];\n// dadosIniciais.json\nvar Host = global.get('Host');\nvar Porta = global.get('Porta');\nvar TipConexao = global.get('TipConexao');\nvar Rack = global.get('Rack');\nvar Slot = global.get('Slot');\nvar Data = global.get('Data');\nvar CodVarDI = global.get('CodVarDI');\nvar TipVariavelLeitura = global.get('TipVariavelLeitura');\n// Variavel de verificaçao\nlet aguarda2 = flow.get('aguarda2');\nlet posIgnore = global.get('posIgnore');\nlet reset = flow.get('reset');\n\nfor (let i in TipConexao) \n{\n    if (TipConexao[i] == \"SIEMENS\") \n    {\n        if (CodVarDI[i] == CodVarEvento[i])\n        {\n            if (!posIgnore.includes(i)) \n            {\n                posEventos.push(i);\n            }\n        }\n    }\n}\n\nlet ins = {};\nlet key = 0;\n\nif(pos != null)\n{\n    for(let i in posEventos)\n    {\n        ins[i] =\n            [{\n                \"delta\": key,\n                \"name\": Host[posEventos[key]],\n                \"rack\": Rack[posEventos[key]],\n                \"slot\": Slot[posEventos[key]],\n                \"data\": Data[posEventos[key]],\n                \"ip\": Host[posEventos[key]],\n                \"port\": Porta[posEventos[key]]\n            }];\n        key++;\n    }\n}\n\nkey = 0;\nflow.set(\"posEventos\", posEventos);\n\nif(posEventos != null)\n{\n    msg.payload = ins;\n    if(reset == true)\n    {\n        msg.reset = reset;\n    }\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 300,
        "wires": [
            [
                "a7d600778e2bbe01"
            ]
        ]
    },
    {
        "id": "03a46d407fe9115d",
        "type": "delay",
        "z": "23fefab45ba4d7fc",
        "name": "0.2 msg/s",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 525,
        "y": 300,
        "wires": [
            [
                "d294c62f92545dd4"
            ]
        ],
        "l": false
    },
    {
        "id": "d294c62f92545dd4",
        "type": "function",
        "z": "23fefab45ba4d7fc",
        "name": "forEach NodeS7 [SIEMENS]",
        "func": "let periodica = flow.get('periodica')\n\nvar devices = msg.payload;\nflow.set(\"aguarda2\", true);\n\nmsg = [];\nif(periodica == false)\n{\n    devices.forEach((/** @type {{ modbus_id: any; modbus_ip: any; modbus_port: any; address: any; quantity: any; }} */ dev) => {\n        let nodes7 = global.get('nodes7');\n        var conn = new nodes7({ debug: false, silent: true });\n        var doneReading = false;\n        \n        var variables = {\n            DATA: dev.data\n        };\n\n        conn.initiateConnection({ port: dev.port, host: dev.ip, rack: dev.rack, slot: dev.slot, debug: false, silent: true}, connected);\n        function connected(err) {\n            if (typeof (err) !== \"undefined\") {\n                // PLC FORA DO ALCANCE\n                //console.log(err);\n                node.error({\n                    \"ip\": dev.ip,\n                    \"port\": dev.port,\n                    \"message\": \"ERRO! Falha na leitura do host \" + dev.ip + \"!\",\n                    \"error\": err.code\n                });\n                conn.connectionCleanup();\n                conn.dropConnection();\n            }\n            conn.setTranslationCB(function (tag) { return variables[tag]; });\n            conn.addItems('DATA');\n            conn.readAllItems(valuesReady);\n        }\n\n        function valuesReady(anythingBad, values) {\n            if (anythingBad) {\n                console.log(\"ERRO! Falha na leitura do host.\"); conn.connectionCleanup(); conn.dropConnection(); }\n            //console.log(values);\n            if(values.DATA != \"BAD 255\")\n            {\n                node.send({\n                    \"topic\": \"TCP Response\",\n                    \"host\": dev.ip,\n                    \"port\": dev.port,\n                    \"rack\": dev.rack,\n                    \"slot\": dev.slot,\n                    \"data\": dev.data,\n                    \"payload\": values.DATA\n                });\n            }\n            doneReading = true;\n            if (doneReading) { conn.connectionCleanup(); conn.dropConnection(); }\n        }\n    });\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 300,
        "wires": [
            [
                "73d2d1e0dbab1657"
            ]
        ]
    },
    {
        "id": "a7d600778e2bbe01",
        "type": "split",
        "z": "23fefab45ba4d7fc",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 475,
        "y": 300,
        "wires": [
            [
                "03a46d407fe9115d"
            ]
        ],
        "l": false
    },
    {
        "id": "73d2d1e0dbab1657",
        "type": "function",
        "z": "23fefab45ba4d7fc",
        "name": "Sai­da [SIEMENS]",
        "func": "let CodVarEvento = global.get('CodVarEvento');\nlet UltimoValLeitura = global.get('UltimoValLeitura');\nlet dataOrigem = global.get('Data');\nlet hostOrigem = global.get('Host');\nlet posEventos = flow.get('posEventos');\nlet posEventosLeitura = [];\nlet ip = msg.host;\nlet port = msg.port;\nlet data = msg.data;\nlet leitura = [];\nlet key = 0;\n\n// verifica informaçoes\nfor(let i in hostOrigem)\n{\n    for(let j in dataOrigem)\n    {\n        if (data == dataOrigem[j] && ip == hostOrigem[i]) {\n            if (posEventos.includes(j)) {\n                if (UltimoValLeitura[j] != msg.payload)\n                {\n                    posEventosLeitura.push(j);\n                    leitura.push(msg.payload);\n                    UltimoValLeitura[j] = msg.payload;\n                    global.set(\"UltimoValLeitura\", UltimoValLeitura);\n                    flow.set(\"leitura2\", leitura);\n                    flow.set(\"posEventosLeitura\", posEventosLeitura);\n                    //node.warn(\"Eventos 1 SIEMENS\");\n                    //node.warn(new Date().getTime());\n                    return msg;\n                }\n            }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 300,
        "wires": [
            [
                "c601389f22ea6ca9"
            ]
        ]
    },
    {
        "id": "8f322b2fd01a09d7",
        "type": "comment",
        "z": "23fefab45ba4d7fc",
        "name": "Compara os valores das variaveis por evento e realiza as leituras",
        "info": "",
        "x": 270,
        "y": 240,
        "wires": []
    },
    {
        "id": "a840667ed18a527e",
        "type": "comment",
        "z": "23fefab45ba4d7fc",
        "name": "EVENTOS",
        "info": "",
        "x": 100,
        "y": 200,
        "wires": []
    },
    {
        "id": "e98a222abfe2f38e",
        "type": "subflow:9ff0a16ac9766cb5",
        "z": "23fefab45ba4d7fc",
        "name": "dadosIniciaisVariaveis.json",
        "x": 220,
        "y": 420,
        "wires": [
            [
                "0817a49521ccec7c"
            ]
        ]
    },
    {
        "id": "1e04999cfcef2585",
        "type": "comment",
        "z": "23fefab45ba4d7fc",
        "name": "Escreve o arquivo de sai­da e modifica o arquivo dadosIniciaisEventosVariaveis.json",
        "info": "",
        "x": 330,
        "y": 360,
        "wires": []
    },
    {
        "id": "0817a49521ccec7c",
        "type": "function",
        "z": "23fefab45ba4d7fc",
        "name": "Atribui variaveis [SIEMENS]",
        "func": "var d = new Date();\nvar hora = (d.getHours()+\":\"+d.getMinutes()+\":\"+d.getSeconds()+\":\"+d.getMilliseconds());\n\nflow.set(\"hora2\", hora);\nflow.set(\"d2\", d);\n\nmsg.payload = d;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 420,
        "wires": [
            [
                "5a2967f8211601c5"
            ]
        ]
    },
    {
        "id": "5a2967f8211601c5",
        "type": "moment",
        "z": "23fefab45ba4d7fc",
        "name": "Timezone",
        "topic": "",
        "input": "",
        "inputType": "msg",
        "inTz": "America/Sao_Paulo",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "YYYY-MM-DDTHH:mm:ss.SSSSSSSZ",
        "locale": "C",
        "output": "",
        "outputType": "msg",
        "outTz": "America/Sao_Paulo",
        "x": 680,
        "y": 420,
        "wires": [
            [
                "8d1dc9e6c470c025"
            ]
        ]
    },
    {
        "id": "d08669debbc21d78",
        "type": "link in",
        "z": "23fefab45ba4d7fc",
        "name": "link in 5",
        "links": [
            "c601389f22ea6ca9",
            "1629874e4b900f46"
        ],
        "x": 55,
        "y": 420,
        "wires": [
            [
                "e98a222abfe2f38e"
            ]
        ]
    },
    {
        "id": "8d1dc9e6c470c025",
        "type": "link out",
        "z": "23fefab45ba4d7fc",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "b8fec95373377cb4"
        ],
        "x": 775,
        "y": 420,
        "wires": []
    },
    {
        "id": "c601389f22ea6ca9",
        "type": "link out",
        "z": "23fefab45ba4d7fc",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "d08669debbc21d78",
            "e4100403dff60fd7"
        ],
        "x": 1035,
        "y": 300,
        "wires": []
    },
    {
        "id": "3b3f07b5e899aa34",
        "type": "function",
        "z": "23fefab45ba4d7fc",
        "name": "Envia saida [SIEMENS]",
        "func": "let json = new Array();\n\nlet leitura2 = flow.get('leitura2');\nlet TipConexao = global.get('TipConexaoVar');\nlet CodVariavelLeitura = global.get('CodVariavelLeituraVar');\nlet ValMuitoBaixo = global.get('ValMuitoBaixoVar');\nlet ValBaixo = global.get('ValBaixoVar');\nlet ValAlto = global.get('ValAltoVar');\nlet ValMuitoAlto = global.get('ValMuitoAltoVar');\nlet NumCasasDecimais = global.get('NumCasasDecimaisVar');\nlet ValEscala = global.get('ValEscalaVar');\nlet CodUnidadeEmpresa = global.get('CodUnidadeEmpresaVar');\nlet TipAlarmeDigital = global.get('TipAlarmeDigitalVar');\nlet TipVariavelLeitura = global.get('TipVariavelLeituraVar');\nlet TipMonitoracaoPeriodico = global.get('TipMonitoracaoPeriodicoVar');\nlet posEventosLeitura = flow.get('posEventosLeitura');\n\nvar hora = flow.get('hora2');\nvar data = msg.payload;\n\nconst DataAtualHoraNova = hora;\nconst DataVariavelLeituraHoraNova = hora;\nconst DataVariavelLeituraDiaNova = data;\n\nflow.set(\"DataVariavelLeituraHoraNova2\", DataVariavelLeituraHoraNova);\nflow.set(\"DataVariavelLeituraDiaNova2\", DataVariavelLeituraDiaNova);\nflow.set(\"DataAtualHoraNova2\", DataAtualHoraNova);\n\nlet TipFuncionando = global.get('TipFuncionandoVar');\nlet CodAreaProcessoAPF = global.get('CodAreaProcessoAPF');\nlet CodAreaProcesso = global.get('CodAreaProcessoVar');\n\nlet escreveu2 = false;\n\nif(posEventosLeitura != null && msg.payload != null)\n{\n    for(let key in posEventosLeitura)\n    {\n        if(TipVariavelLeitura[posEventosLeitura[key]] == 1 || TipVariavelLeitura[posEventosLeitura[key]] == 2)\n        {\n            if(leitura2.length > 1)\n            {\n                for(let pos in leitura2)\n                {\n                    leitura2[pos] = leitura2[pos].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n                }\n            } else\n            {\n                leitura2 = leitura2[0].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n            }\n\n            ValMuitoBaixo[posEventosLeitura[key]] = ValMuitoBaixo[posEventosLeitura[key]].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n            ValBaixo[posEventosLeitura[key]] = ValBaixo[posEventosLeitura[key]].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n            ValAlto[posEventosLeitura[key]] = ValAlto[posEventosLeitura[key]].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n            ValMuitoAlto[posEventosLeitura[key]] = ValMuitoAlto[posEventosLeitura[key]].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n\n            if (CodAreaProcesso[posEventosLeitura[key]] == CodAreaProcessoAPF[posEventosLeitura[key]]) {\n                TipFuncionando[posEventosLeitura[key]] = true\n            }\n            \n            json = {\n                \"CodVariavelLeitura\": CodVariavelLeitura[posEventosLeitura[key]],\n                \"ValMuitoBaixo\": parseFloat(ValMuitoBaixo[posEventosLeitura[key]]),\n                \"ValBaixo\": parseFloat(ValBaixo[posEventosLeitura[key]]),\n                \"ValVariavelLeitura\": parseFloat(leitura2),\n                \"ValVariavelLeituraString\": null,\n                \"ValAlto\": parseFloat(ValAlto[posEventosLeitura[key]]),\n                \"ValMuitoAlto\": parseFloat(ValMuitoAlto[posEventosLeitura[key]]),\n                \"TipFuncionando\": TipFuncionando[posEventosLeitura[key]],\n                \"DataVariavelLeitura\": DataVariavelLeituraDiaNova,\n                \"TipMonitoracaoPeriodico\": TipMonitoracaoPeriodico[posEventosLeitura[key]]\n            };\n        } else if(TipVariavelLeitura[posEventosLeitura[key]] == 3 || TipVariavelLeitura[posEventosLeitura[key]] == 4) \n        {\n            if(leitura2.length == 1)\n            {\n                json = {\n                    \"CodVariavelLeitura\": CodVariavelLeitura[posEventosLeitura[key]],\n                    \"ValMuitoBaixo\": ValMuitoBaixo[posEventosLeitura[key]],\n                    \"ValBaixo\": ValBaixo[posEventosLeitura[key]],\n                    \"ValVariavelLeitura\": null,\n                    \"ValVariavelLeituraString\": leitura2[0],\n                    \"ValAlto\": ValAlto[posEventosLeitura[key]],\n                    \"ValMuitoAlto\": ValMuitoAlto[posEventosLeitura[key]],\n                    \"TipFuncionando\": TipFuncionando[posEventosLeitura[key]],\n                    \"DataVariavelLeituraDia\": DataVariavelLeituraDiaNova,\n                    \"TipMonitoracaoPeriodico\": TipMonitoracaoPeriodico[posEventosLeitura[key]]\n                };\n            } \n            else if(leitura2.length > 1)\n            {\n                json = {\n                    \"CodVariavelLeitura\": CodVariavelLeitura[posEventosLeitura[key]],\n                    \"ValMuitoBaixo\": ValMuitoBaixo[posEventosLeitura[key]],\n                    \"ValBaixo\": ValBaixo[posEventosLeitura[key]],\n                    \"ValVariavelLeitura\": null,\n                    \"ValVariavelLeituraString\": leitura2,\n                    \"ValAlto\": ValAlto[posEventosLeitura[key]],\n                    \"ValMuitoAlto\": ValMuitoAlto[posEventosLeitura[key]],\n                    \"TipFuncionando\": TipFuncionando[posEventosLeitura[key]],\n                    \"DataVariavelLeituraDia\": DataVariavelLeituraDiaNova,\n                    \"TipMonitoracaoPeriodico\": TipMonitoracaoPeriodico[posEventosLeitura[key]]\n                };\n            }\n        }\n    }\n}\n\nmsg.payload = json;\nif(msg.payload != null){\n    escreveu2 = true\n    flow.set(\"escreveu2\", escreveu2)\n    /* node.warn(\"Eventos SIEMENS 2\");\n    node.warn(new Date().getTime()); */\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 480,
        "wires": [
            [
                "5b7c28b03b2ad138"
            ]
        ]
    },
    {
        "id": "b8fec95373377cb4",
        "type": "link in",
        "z": "23fefab45ba4d7fc",
        "name": "link in 6",
        "links": [
            "8d1dc9e6c470c025"
        ],
        "x": 55,
        "y": 480,
        "wires": [
            [
                "3b3f07b5e899aa34",
                "db8501b10639640c"
            ]
        ]
    },
    {
        "id": "772bf2043fc1fa19",
        "type": "comment",
        "z": "23fefab45ba4d7fc",
        "name": "Compara em sequencia as datas das variaveis",
        "info": "",
        "x": 220,
        "y": 620,
        "wires": []
    },
    {
        "id": "8319723f12dfbf65",
        "type": "comment",
        "z": "23fefab45ba4d7fc",
        "name": "PERIODICAS",
        "info": "",
        "x": 110,
        "y": 580,
        "wires": []
    },
    {
        "id": "f0993058a0657a17",
        "type": "inject",
        "z": "23fefab45ba4d7fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "ed9c5ad7396c1097"
            ]
        ]
    },
    {
        "id": "ed9c5ad7396c1097",
        "type": "function",
        "z": "23fefab45ba4d7fc",
        "name": "Verifica se o tempo estourou [SIEMENS]",
        "func": "let DataVariavelLeituraDiaAntiga = global.get('DataVariavelLeituraDiaAntiga');\nlet TipUnidadePeriodo = global.get('TipUnidadePeriodo');\nlet ValPeriodo = global.get('ValPeriodo');\nlet tempo = [];\nlet posLeiturasPeriodicas = \"\";\nvar d = new Date();\nlet antiga = [];\nlet aguarda = flow.get('aguarda') || false;\nlet posIgnore = global.get('posIgnore');\nlet pos = [];\n\n// Codigo das variaveis a serem lidas periodicamente\nvar CodVar = global.get('CodVariavelLeituraVar');\nvar CodVarDI = global.get('CodVarDI');\nvar Host = global.get('Host');\nvar Porta = global.get('Porta');\nvar TipConexao = global.get('TipConexao');\nvar Rack = global.get('Rack');\nvar Slot = global.get('Slot');\nvar Data = global.get('Data');\nvar CodVariavelLeitura = global.get('CodVariavelLeitura');\nvar TipVariavelLeitura = global.get('TipVariavelLeitura');\n\nlet ins = {};\nlet key = 0;\n\nfor(let i in TipUnidadePeriodo)\n{\n    antiga[i] = new Date(Date.parse(DataVariavelLeituraDiaAntiga[i]));\n    switch(TipUnidadePeriodo[i])\n    {\n        case 1: // segundo\n            antiga[i].setSeconds(antiga[i].getSeconds() + ValPeriodo[i]);\n            break;\n        case 2: // minuto\n            antiga[i].setMinutes(antiga[i].getMinutes() + ValPeriodo[i]);\n            break;\n        case 3: // hora\n            antiga[i].setHours(antiga[i].getHours() + ValPeriodo[i]);\n            break;\n    }\n}\n\nif(tempo != null)\n{\n    for(let i in DataVariavelLeituraDiaAntiga)\n    {\n        if (TipConexao[i] == \"SIEMENS\") \n        {\n            if(antiga[i] <= d.getTime())\n            {\n                pos = i;\n            }\n        }\n    }\n}\n\nif(pos != null)\n{\n    if (!posIgnore.includes(pos)) \n    {\n        posLeiturasPeriodicas = pos;\n        ins[0] = [{ \n            \"delta\": key,\n            \"name\": Host[posLeiturasPeriodicas],\n            \"rack\": Rack[posLeiturasPeriodicas],\n            \"slot\": Slot[posLeiturasPeriodicas],\n            \"data\": Data[posLeiturasPeriodicas],\n            \"ip\": Host[posLeiturasPeriodicas],\n            \"port\": Porta[posLeiturasPeriodicas]\n        }]\n        key++\n    }\n}\n\nkey = 0\nflow.set(\"posLeiturasPeriodicas\", posLeiturasPeriodicas);\n\nif(posLeiturasPeriodicas != \"\" && aguarda == false){\n    msg.payload = ins\n    flow.set(\"conta\", 0);\n    /* node.warn(\"Periodicas Siemens 1\");\n    node.warn(new Date().getTime()); */\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 680,
        "wires": [
            [
                "f9acc3acdd5e63fe"
            ]
        ]
    },
    {
        "id": "f9acc3acdd5e63fe",
        "type": "split",
        "z": "23fefab45ba4d7fc",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 575,
        "y": 680,
        "wires": [
            [
                "d2586bbac4fa63d3"
            ]
        ],
        "l": false
    },
    {
        "id": "987414d7cc0622f5",
        "type": "function",
        "z": "23fefab45ba4d7fc",
        "name": "forEach NodeS7 [SIEMENS]",
        "func": "let posLeiturasPeriodicas = flow.get(\"posLeiturasPeriodicas\");\nvar devices = msg.payload;\nflow.set(\"aguarda\", true);\nflow.set(\"periodica\", true);\n\nmsg = [];\n\nlet nodes7 = global.get('nodes7');\nvar conn = new nodes7({ debug: false, silent: true });\n\ndevices.forEach((/** @type {{ modbus_id: any; modbus_ip: any; modbus_port: any; address: any; quantity: any; }} */ dev) => {\n   var variables = {\n      DATA: dev.data\n   };\n   \n   conn.initiateConnection({ port: dev.port, host: dev.ip, rack: dev.rack, slot: dev.slot, debug: false, silent: true }, connected);\n   function connected(err) {\n      if (typeof (err) !== \"undefined\") {\n         const fs = global.get('fs').promises;\n         let obj;\n         let json;\n         let filePath = 'C:/Nexxus/logPeriodicaSiemens.json';\n         async function readFile(filePath) {\n            try {\n               const data = await fs.readFile(filePath);\n               //console.log(JSON.parse(data));\n               // node.warn(JSON.parse(data));\n               obj = JSON.parse(data);\n               let message = {\n                  \"ip\": dev.ip,\n                  \"port\": dev.port,\n                  \"message\": \"ERRO! Falha na leitura do host \" + dev.ip + \"!\",\n                  \"error\": err.code\n               }\n               obj.push(message);\n               json = JSON.stringify(obj);\n               fs.writeFile(filePath, json, 'utf8', function (err) {\n                  if (err) console.log(err);\n                  //console.log('complete');\n                  node.warn('complete');\n               }\n               );\n               msg.payload = obj[obj.length];\n               node.send(msg);\n            } catch (error) {\n               console.error(`Got an error trying to read the file: ${error.message}`);\n               node.error(`Got an error trying to read the file: ${error.message}`);\n            }\n         }\n         readFile(filePath);\n         // PLC FORA DO ALCANCE\n         console.log(err);\n         node.error({\n            \"ip\": dev.ip,\n            \"port\": dev.port,\n            \"message\": \"ERRO! Falha na leitura do host \" + dev.ip + \"!\",\n            \"error\": err.code\n         });\n         flow.set(\"aguarda\", false);\n         conn.connectionCleanup();\n         conn.dropConnection();\n      }\n      conn.setTranslationCB(function (tag) { return variables[tag]; });\n      conn.addItems('DATA');\n      conn.readAllItems(valuesReady);\n   }\n\n   function valuesReady(anythingBad, values) {\n      if (anythingBad) {\n         console.log(\"ERRO! Falha na leitura do host.\"); flow.set(\"aguarda\", false); conn.connectionCleanup(); conn.dropConnection();}\n      //console.log(values);\n      if (values.DATA != \"BAD 255\") {\n         node.send({\n            \"topic\": \"TCP Response\",\n            \"host\": dev.ip,\n            \"port\": dev.port,\n            \"rack\": dev.rack,\n            \"slot\": dev.slot,\n            \"data\": dev.data,\n            \"payload\": values.DATA\n         });\n      }\n      flow.set(\"aguarda\", false);\n      conn.connectionCleanup();\n      conn.dropConnection();\n   }\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "process",
                "module": "process"
            }
        ],
        "x": 780,
        "y": 680,
        "wires": [
            [
                "9b59a6910175695e"
            ]
        ]
    },
    {
        "id": "d2586bbac4fa63d3",
        "type": "delay",
        "z": "23fefab45ba4d7fc",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 625,
        "y": 680,
        "wires": [
            [
                "987414d7cc0622f5"
            ]
        ],
        "l": false
    },
    {
        "id": "9b59a6910175695e",
        "type": "function",
        "z": "23fefab45ba4d7fc",
        "name": "Sai­da [SIEMENS]",
        "func": "let CodVarDI = global.get('CodVarDI');\nlet dataOrigem = global.get('Data');\nlet hostOrigem = global.get('Host');\nlet posLeiturasPeriodicas = flow.get('posLeiturasPeriodicas');\nlet posLeitura = [];\nlet host = msg.host;\nlet port = msg.port;\nlet data = msg.data;\nlet leitura = flow.get('leitura');\n\n// verifica informaçoes\nfor (let i in hostOrigem) {\n    for (let j in dataOrigem) {\n        if (data == dataOrigem[j] && host == hostOrigem[i]) {\n            if (posLeiturasPeriodicas.includes(j)) {\n                leitura = msg.payload;\n                flow.set(\"leitura\", leitura);\n\n                msg.payload = leitura\n\n                flow.set(\"aguarda\", false)\n                return msg;\n            }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 680,
        "wires": [
            [
                "84ff8d492e0f5f59"
            ]
        ]
    },
    {
        "id": "a795310f12a27a3f",
        "type": "function",
        "z": "23fefab45ba4d7fc",
        "name": "Atribui variaveis [SIEMENS]",
        "func": "var d = new Date()\nvar hora = (d.getHours()+\":\"+d.getMinutes()+\":\"+d.getSeconds()+\":\"+d.getMilliseconds())\n\nflow.set(\"hora\", hora)\nflow.set(\"d\", d)\n\nmsg.payload = d\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 800,
        "wires": [
            [
                "8877caa96188e204"
            ]
        ]
    },
    {
        "id": "8877caa96188e204",
        "type": "moment",
        "z": "23fefab45ba4d7fc",
        "name": "Timezone",
        "topic": "",
        "input": "",
        "inputType": "msg",
        "inTz": "America/Sao_Paulo",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "YYYY-MM-DDTHH:mm:ss.SSSSSSSZ",
        "locale": "C",
        "output": "",
        "outputType": "msg",
        "outTz": "America/Sao_Paulo",
        "x": 680,
        "y": 800,
        "wires": [
            [
                "9d40372e741719bb"
            ]
        ]
    },
    {
        "id": "7f3530ce0475f1a5",
        "type": "comment",
        "z": "23fefab45ba4d7fc",
        "name": "Escreve o arquivo de sai­da e modifica o arquivo dadosIniciais.json",
        "info": "",
        "x": 280,
        "y": 740,
        "wires": []
    },
    {
        "id": "df56421174c106e2",
        "type": "subflow:9ff0a16ac9766cb5",
        "z": "23fefab45ba4d7fc",
        "name": "dadosIniciaisVariaveis.json",
        "x": 220,
        "y": 800,
        "wires": [
            [
                "a795310f12a27a3f"
            ]
        ]
    },
    {
        "id": "84ff8d492e0f5f59",
        "type": "link out",
        "z": "23fefab45ba4d7fc",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "848feadb2ef7c083"
        ],
        "x": 1135,
        "y": 680,
        "wires": []
    },
    {
        "id": "848feadb2ef7c083",
        "type": "link in",
        "z": "23fefab45ba4d7fc",
        "name": "link in 7",
        "links": [
            "84ff8d492e0f5f59"
        ],
        "x": 55,
        "y": 800,
        "wires": [
            [
                "df56421174c106e2"
            ]
        ]
    },
    {
        "id": "9d40372e741719bb",
        "type": "link out",
        "z": "23fefab45ba4d7fc",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "3b608a06b2568223"
        ],
        "x": 775,
        "y": 800,
        "wires": []
    },
    {
        "id": "7ed9eddc3b4ee284",
        "type": "function",
        "z": "23fefab45ba4d7fc",
        "name": "Envia saida [SIEMENS]",
        "func": "let json = new Array();\n\nlet leitura = flow.get('leitura');\nlet TipConexao = global.get('TipConexaoVar');\nlet CodVariavelLeitura = global.get('CodVariavelLeituraVar');\nlet ValMuitoBaixo = global.get('ValMuitoBaixoVar');\nlet ValBaixo = global.get('ValBaixoVar');\nlet ValAlto = global.get('ValAltoVar');\nlet ValMuitoAlto = global.get('ValMuitoAltoVar');\nlet NumCasasDecimais = global.get('NumCasasDecimaisVar');\nlet ValEscala = global.get('ValEscalaVar');\nlet CodUnidadeEmpresa = global.get('CodUnidadeEmpresaVar');\nlet TipAlarmeDigital = global.get('TipAlarmeDigitalVar');\nlet TipVariavelLeitura = global.get('TipVariavelLeituraVar');\nlet TipMonitoracaoPeriodico = global.get('TipMonitoracaoPeriodicoVar');\n\nvar hora = flow.get('hora');\nvar data = msg.payload;\n\nconst DataAtualHoraNova = hora;\nconst DataVariavelLeituraHoraNova = hora;\nconst DataVariavelLeituraDiaNova = data;\n\nflow.set(\"DataVariavelLeituraHoraNova\", DataVariavelLeituraHoraNova);\nflow.set(\"DataVariavelLeituraDiaNova\", DataVariavelLeituraDiaNova);\nflow.set(\"DataAtualHoraNova\", DataAtualHoraNova);\n\nlet posLeiturasPeriodicas = flow.get('posLeiturasPeriodicas');\n\nlet TipFuncionando = global.get('TipFuncionandoVar');\nlet CodAreaProcessoAPF = global.get('CodAreaProcessoAPF');\nlet CodAreaProcesso = global.get('CodAreaProcessoVar');\n\nlet escreveu = false;\n\nif (posLeiturasPeriodicas != null && msg.payload != null)\n{   \n    if (TipVariavelLeitura[posLeiturasPeriodicas] == 1 || TipVariavelLeitura[posLeiturasPeriodicas] == 2)\n    {\n        if(typeof(leitura) == typeof(2) || typeof(leitura) == typeof(true))\n        {\n            if (typeof (leitura) != typeof (true)) {\n                leitura = leitura.toFixed(NumCasasDecimais[posLeiturasPeriodicas]);\n                leitura = parseFloat(leitura);\n            }\n\n            ValMuitoBaixo[posLeiturasPeriodicas] = ValMuitoBaixo[posLeiturasPeriodicas].toFixed(NumCasasDecimais[posLeiturasPeriodicas]);\n            ValBaixo[posLeiturasPeriodicas] = ValBaixo[posLeiturasPeriodicas].toFixed(NumCasasDecimais[posLeiturasPeriodicas]);\n            ValAlto[posLeiturasPeriodicas] = ValAlto[posLeiturasPeriodicas].toFixed(NumCasasDecimais[posLeiturasPeriodicas]);\n            ValMuitoAlto[posLeiturasPeriodicas] = ValMuitoAlto[posLeiturasPeriodicas].toFixed(NumCasasDecimais[posLeiturasPeriodicas]);\n\n            if (CodAreaProcesso[posLeiturasPeriodicas] == CodAreaProcessoAPF[posLeiturasPeriodicas]) {\n                TipFuncionando[posLeiturasPeriodicas] = true;\n            }\n\n            json = {\n                \"CodVariavelLeitura\": CodVariavelLeitura[posLeiturasPeriodicas],\n                \"ValMuitoBaixo\": parseFloat(ValMuitoBaixo[posLeiturasPeriodicas]),\n                \"ValBaixo\": parseFloat(ValBaixo[posLeiturasPeriodicas]),\n                \"ValVariavelLeitura\": leitura,\n                \"ValVariavelLeituraString\": null,\n                \"ValAlto\": parseFloat(ValAlto[posLeiturasPeriodicas]),\n                \"ValMuitoAlto\": parseFloat(ValMuitoAlto[posLeiturasPeriodicas]),\n                \"TipFuncionando\": TipFuncionando[posLeiturasPeriodicas],\n                \"DataVariavelLeitura\": DataVariavelLeituraDiaNova,\n                \"TipMonitoracaoPeriodico\": TipMonitoracaoPeriodico[posLeiturasPeriodicas]\n            };\n        }\n    } else if (TipVariavelLeitura[posLeiturasPeriodicas] == 3 || TipVariavelLeitura[posLeiturasPeriodicas] == 4) {\n        if (typeof (leitura) == typeof (\"string\")) {\n            json = {\n                \"CodVariavelLeitura\": CodVariavelLeitura[posLeiturasPeriodicas],\n                \"ValMuitoBaixo\": ValMuitoBaixo[posLeiturasPeriodicas],\n                \"ValBaixo\": ValBaixo[posLeiturasPeriodicas],\n                \"ValVariavelLeitura\": null,\n                \"ValVariavelLeituraString\": leitura,\n                \"ValAlto\": ValAlto[posLeiturasPeriodicas],\n                \"ValMuitoAlto\": ValMuitoAlto[posLeiturasPeriodicas],\n                \"TipFuncionando\": TipFuncionando[posLeiturasPeriodicas],\n                \"DataVariavelLeituraDia\": DataVariavelLeituraDiaNova,\n                \"TipMonitoracaoPeriodico\": TipMonitoracaoPeriodico[posLeiturasPeriodicas]\n            };\n        }\n    }\n}\n\nmsg.payload = json;\nif(msg.payload != null)\n{\n    escreveu = true\n    flow.set(\"escreveu\", escreveu);\n    flow.set(\"contador\", 0)\n    flow.set(\"leitura\", [])\n    /* node.warn(\"Periodicas Siemens 2\");\n    node.warn(new Date().getTime()); */\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 860,
        "wires": [
            [
                "21504a788f1818da"
            ]
        ]
    },
    {
        "id": "3b608a06b2568223",
        "type": "link in",
        "z": "23fefab45ba4d7fc",
        "name": "link in 8",
        "links": [
            "9d40372e741719bb"
        ],
        "x": 55,
        "y": 860,
        "wires": [
            [
                "eb4a47b0cbee1d4e",
                "7ed9eddc3b4ee284"
            ]
        ]
    },
    {
        "id": "f6cd400265a2f9a3",
        "type": "inject",
        "z": "23fefab45ba4d7fc",
        "name": "Reset Inicio",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 65,
        "y": 100,
        "wires": [
            [
                "acf4415fdd5d6907"
            ]
        ],
        "l": false
    },
    {
        "id": "acf4415fdd5d6907",
        "type": "function",
        "z": "23fefab45ba4d7fc",
        "name": "Reset nmsg",
        "func": "flow.set(\"aguarda2\", false);\nflow.set(\"aguarda\", false);\nflow.set(\"periodica\", false);\nflow.set(\"leitura\", []);\nglobal.set(\"posIgnore\", []);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 115,
        "y": 100,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "991a0910a125d082",
        "type": "status",
        "z": "23fefab45ba4d7fc",
        "name": "",
        "scope": [
            "28ef3692ef123088"
        ],
        "x": 65,
        "y": 140,
        "wires": [
            [
                "7b8de48cef5b0f96"
            ]
        ],
        "l": false
    },
    {
        "id": "7b8de48cef5b0f96",
        "type": "function",
        "z": "23fefab45ba4d7fc",
        "name": "Reset nmsg",
        "func": "flow.set(\"reset\", false);\nif(Number(msg.status.text) > 200)\n{\n    flow.set(\"reset\", true);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 115,
        "y": 140,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "cda14cb15bbdf232",
        "type": "comment",
        "z": "23fefab45ba4d7fc",
        "name": "INICIALIZAÇÃO",
        "info": "",
        "x": 120,
        "y": 20,
        "wires": []
    },
    {
        "id": "21504a788f1818da",
        "type": "link out",
        "z": "23fefab45ba4d7fc",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "7f77ed8b0afce9c1"
        ],
        "x": 355,
        "y": 860,
        "wires": []
    },
    {
        "id": "eb4a47b0cbee1d4e",
        "type": "function",
        "z": "23fefab45ba4d7fc",
        "name": "Altera data [SIEMENS]",
        "func": "const fs = global.get('fs').promises;\nlet obj;\nlet json;\nlet dia = msg.payload;\nlet hora = flow.get('hora');\nlet posLeiturasPeriodicas = flow.get('posLeiturasPeriodicas');\nlet CodVariavelLeitura = global.get('CodVarDI');\nlet DataVariavelLeituraDiaAntiga = global.get('DataVariavelLeituraDiaAntiga');\nlet DataVariavelLeituraHora = global.get('DataVariavelLeituraHora');\nlet DataAtualHora = global.get('DataAtualHora');\nlet filePath = 'C:/Users/Nexxus/Desktop/Node-RED/archives/dadosIniciais.json';\n\nasync function readFile(filePath) {\n    try {\n        const data = await fs.readFile(filePath);\n        //console.log(JSON.parse(data));\n        // node.warn(JSON.parse(data));\n        obj = JSON.parse(data);\n        for (const json of obj) {\n            for(let i in json.ListaMonitoraGruposPeriodicos)\n                if (json.ListaMonitoraGruposPeriodicos[i].CodVariavelLeitura === CodVariavelLeitura[posLeiturasPeriodicas]) {\n                    json.ListaMonitoraGruposPeriodicos[i].DataVariavelLeituraDia = dia;\n                    json.ListaMonitoraGruposPeriodicos[i].DataVariavelLeituraHora = hora;\n                    json.ListaMonitoraGruposPeriodicos[i].DataAtualHora = hora;\n\n                    break;\n                }\n        }\n        if (obj != null) \n        {\n            json = JSON.stringify(obj);\n        }\n        // node.warn(json)\n        fs.writeFile(filePath, json, 'utf8', function (error) {\n            if(error) {\n                console.error(`Got an error trying to write the file: ${error.message}`);\n                node.error(`Got an error trying to write the file: ${error.message}`);\n            }\n            //console.log('complete');\n        }\n        );\n        msg.payload = obj[obj.length];\n        node.send(msg);\n\n        for (let pos in CodVariavelLeitura) {\n            if (pos == posLeiturasPeriodicas) {\n                DataVariavelLeituraDiaAntiga[pos] = data;\n                global.set(\"DataVariavelLeituraDiaAntiga\", DataVariavelLeituraDiaAntiga);\n\n                DataVariavelLeituraHora[pos] = hora;\n                global.set(\"DataVariavelLeituraHora\", DataVariavelLeituraHora);\n\n                DataAtualHora[pos] = hora;\n                global.set(\"DataAtualHora\", DataAtualHora);\n            }\n        }\n    } catch (error) {\n        console.error(`Got an error trying to read the file: ${error.message}`);\n        node.error(`Got an error trying to read the file: ${error.message}`);\n    }\n}\n\nreadFile(filePath);\nmsg.payload = dia\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "5b7c28b03b2ad138",
        "type": "link out",
        "z": "23fefab45ba4d7fc",
        "name": "link out 17",
        "mode": "link",
        "links": [
            "2455f8aca7392015"
        ],
        "x": 355,
        "y": 480,
        "wires": []
    },
    {
        "id": "db8501b10639640c",
        "type": "function",
        "z": "23fefab45ba4d7fc",
        "name": "Altera ultimo leitura [SIEMENS]",
        "func": "const fs = global.get('fs').promises;\nlet obj;\nlet json;\nlet filePath = \"C:/Users/Nexxus/Desktop/Node-RED/archives/dadosIniciaisEventosVariaveis.json\";\nlet data = msg.payload\nlet hora = flow.get('hora')\nlet posEventosLeitura = flow.get('posEventosLeitura')\nlet posEventos = flow.get('posEventos')\nlet linha = []\nlet CodVariavelLeitura = global.get('CodVarDI')\nlet DataVariavelLeituraHora = flow.get('DataVariavelLeituraHora')\nlet DataVariavelLeituraDiaAntiga = flow.get('DataVariavelLeituraDiaAntiga')\nlet DataAtualHora = flow.get('DataAtualHora')\nlet leitura2 = flow.get('leitura2')\n\nasync function readFile(filePath) {\n    try {\n        const data = await fs.readFile(filePath);\n        console.log(JSON.parse(data));\n        // node.warn(JSON.parse(data));\n        obj = JSON.parse(data);\n        for (const json of obj) {\n            node.warn(\"posEventosLeitura\" + posEventosLeitura)\n            for(let i in json.ListaAdicionaEventosVariaveis)\n                if (json.ListaAdicionaEventosVariaveis[i].CodVariavelLeitura === CodVariavelLeitura[posEventosLeitura[i]]) {\n                    json.ListaAdicionaEventosVariaveis[i].UltimoValLeitura = leitura2[0];\n\n                    break;\n                }\n        }\n        json = JSON.stringify(obj);\n        // node.warn(json)\n        fs.writeFile(filePath, json, 'utf8', function (err) {\n            if (err) throw err;\n            console.log('complete');\n        }\n        );\n        msg.payload = obj[obj.length];\n        node.send(msg);\n    } catch (error) {\n        console.error(`Got an error trying to read the file: ${error.message}`);\n        node.error(`Got an error trying to read the file: ${error.message}`);\n    }\n}\n\nreadFile(filePath);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "b4a717113a64a177",
        "type": "link in",
        "z": "23fefab45ba4d7fc",
        "name": "link in 20",
        "links": [
            "c571d1348be81673"
        ],
        "x": 65,
        "y": 60,
        "wires": [
            [
                "acf4415fdd5d6907"
            ]
        ]
    },
    {
        "id": "3fa8b1d0488b3a05",
        "type": "inject",
        "z": "4a59210c8e331d38",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "546208538b8372a3"
            ]
        ]
    },
    {
        "id": "546208538b8372a3",
        "type": "function",
        "z": "4a59210c8e331d38",
        "name": "Parametros [ROCKWELL]",
        "func": "// dadosIniciaisEventosVariaveis.json\nvar CodVarEvento = global.get('CodVarEvento');\nvar posEventos = [];\n// dadosIniciais.json\nvar Host = global.get('Host');\nvar TipConexao = global.get('TipConexao');\nvar CPUSlot = global.get('CPUSlot');\nvar EthernetSlot = global.get('EthernetSlot');\nvar TagName = global.get('TagName');\nvar ProgName = global.get('ProgName');\nvar DataType = global.get('DataType');\nvar CodVarDI = global.get('CodVarDI');\nvar TipVariavelLeitura = global.get('TipVariavelLeitura');\n// Variavel de verificaçao\nlet aguarda2 = flow.get('aguarda2');\nlet posIgnore = global.get('posIgnore');\nlet reset = flow.get('reset');\n\nfor (let i in TipConexao) \n{\n    if (TipConexao[i] == \"ROCKWELL\") \n    {\n        if (CodVarDI[i] == CodVarEvento[i])\n        {\n            if (!posIgnore.includes(i)) \n            {\n                posEventos.push(i);\n            }\n        }\n    }\n}\n\nlet ins = {};\nlet key = 0;\n\nfor(let i in posEventos)\n{\n    ins[i] =\n        [{\n            \"delta\": key,\n            \"name\": Host[posEventos[key]],\n            \"ip\": Host[posEventos[key]],\n            \"cpuslot\": CPUSlot[posEventos[key]],\n            \"ethernetslot\": EthernetSlot[posEventos[key]],\n            \"tag\": TagName[posEventos[key]],\n            \"prog\": ProgName[posEventos[key]],\n            \"datatype\": DataType[posEventos[key]],\n        }];\n    key++;\n}\n\nkey = 0;\nflow.set(\"posEventos\", posEventos);\n\nif(posEventos != null)\n{\n    msg.payload = ins;\n    if(reset == true)\n    {\n        msg.reset = reset;\n    }\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 300,
        "wires": [
            [
                "0f09f0f003436cb3"
            ]
        ]
    },
    {
        "id": "4e3c48a4fdbd3c1c",
        "type": "delay",
        "z": "4a59210c8e331d38",
        "name": "0.2 msg/s",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.3",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 525,
        "y": 300,
        "wires": [
            [
                "0f6927dd2a508306"
            ]
        ],
        "l": false
    },
    {
        "id": "0f6927dd2a508306",
        "type": "function",
        "z": "4a59210c8e331d38",
        "name": "forEach st-ethernet-ip [ROCKWELL]",
        "func": "let periodica = flow.get('periodica')\n\nvar devices = msg.payload;\nflow.set(\"aguarda2\", true);\n\nmsg = [];\nif(periodica != true)\n{\n    devices.forEach((/** @type {{ modbus_id: any; modbus_ip: any; modbus_port: any; address: any; quantity: any; }} */ dev) => {\n        const { Controller, Tag, EthernetIP } = global.get(\"ethernetip\");\n        const { DINT, SINT, INT, BOOL, REAL } = EthernetIP.CIP.DataTypes.Types;\n\n        const PLC = new Controller(false/* ,{unconnectedSendTimeout: 5064 } */);\n\n        switch(dev.datatype)\n        {\n            case \"DINT\": \n            {\n                var tag = new Tag(dev.tag, dev.prog, DINT);\n                break;\n            }\n            case \"SINT\":\n            {\n                var tag = new Tag(dev.tag, dev.prog, SINT);\n                break;\n            }\n            case \"INT\":\n            {\n                var tag = new Tag(dev.tag, dev.prog, INT);\n                break;\n            }\n            case \"BOOL\":\n            {\n                var tag = new Tag(dev.tag, dev.prog, BOOL);\n                break;\n            }\n            case \"REAL\":\n            {\n                var tag = new Tag(dev.tag, dev.prog, REAL);\n                break;\n            }\n            \n        }\n\n        PLC.connect(dev.ip, dev.cpuslot, dev.ethernetslot).then(async () => {\n            await PLC.readTag(tag);\n\n            //console.log(tag.value);\n            node.send({\n                \"topic\": \"Ethernet/IP Response\",\n                \"host\": dev.ip,\n                \"cpu\": dev.cpuslot,\n                \"ethernet\": dev.ethernetslot,\n                \"tag\": dev.tag,\n                \"prog\": dev.prog,\n                \"type\": dev.datatype,\n                \"payload\": tag.value\n            });\n            PLC.disconnect(dev.ip, dev.cpuslot, dev.ethernetslot);\n            PLC.destroy();\n        }).catch(err => {\n            console.log(err);\n            node.error({\n                \"ip\": dev.ip,\n                \"message\": \"ERRO! Falha na leitura do host \" + dev.ip + \"!\",\n                \"error\": err.code\n            });\n            flow.set(\"aguarda2\", false);\n        });\n    });\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 300,
        "wires": [
            [
                "2266e0a6bcb1a786"
            ]
        ]
    },
    {
        "id": "0f09f0f003436cb3",
        "type": "split",
        "z": "4a59210c8e331d38",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 475,
        "y": 300,
        "wires": [
            [
                "4e3c48a4fdbd3c1c"
            ]
        ],
        "l": false
    },
    {
        "id": "2266e0a6bcb1a786",
        "type": "function",
        "z": "4a59210c8e331d38",
        "name": "Sai­da [ROCKWELL]",
        "func": "let CodVarEvento = global.get('CodVarEvento');\nlet UltimoValLeitura = global.get('UltimoValLeitura');\nlet tagOrigem = global.get('TagName');\nlet hostOrigem = global.get('Host');\nlet posEventos = flow.get('posEventos');\nlet posEventosLeitura = [];\nlet host = msg.host;\nlet cpu = msg.cpu;\nlet ethernet = msg.ethernet;\nlet tag = msg.tag;\nlet prog = msg.prog;\nlet type = msg.type;\nlet leitura = [];\nlet key = 0;\n\n// verifica informaçoes\nfor(let i in hostOrigem)\n{\n    for(let j in tagOrigem)\n    {\n        if (tag == tagOrigem[j] && host == hostOrigem[i]) {\n            if (posEventos.includes(j)) {\n                if (UltimoValLeitura[j] != msg.payload)\n                {\n                    posEventosLeitura.push(j);\n                    leitura.push(msg.payload);\n                    UltimoValLeitura[j] = msg.payload;\n                    global.set(\"UltimoValLeitura\", UltimoValLeitura);\n                    flow.set(\"leitura2\", leitura);\n                    flow.set(\"posEventosLeitura\", posEventosLeitura);\n                    //node.warn(\"Eventos 1\");\n                    //node.warn(new Date().getTime());\n                    return msg;\n                }\n            }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 300,
        "wires": [
            [
                "c6553a05417c9311"
            ]
        ]
    },
    {
        "id": "c15491f08b42acdf",
        "type": "comment",
        "z": "4a59210c8e331d38",
        "name": "Compara os valores das variaveis por evento e realiza as leituras",
        "info": "",
        "x": 270,
        "y": 240,
        "wires": []
    },
    {
        "id": "ecb5179e8c142d07",
        "type": "comment",
        "z": "4a59210c8e331d38",
        "name": "EVENTOS",
        "info": "",
        "x": 100,
        "y": 200,
        "wires": []
    },
    {
        "id": "da5d317e4c2b3222",
        "type": "subflow:9ff0a16ac9766cb5",
        "z": "4a59210c8e331d38",
        "name": "dadosIniciaisVariaveis.json",
        "x": 220,
        "y": 420,
        "wires": [
            [
                "e1974f8bd3dba868"
            ]
        ]
    },
    {
        "id": "9e1c227323ec6def",
        "type": "comment",
        "z": "4a59210c8e331d38",
        "name": "Escreve o arquivo de sai­da e modifica o arquivo dadosIniciaisEventosVariaveis.json",
        "info": "",
        "x": 330,
        "y": 360,
        "wires": []
    },
    {
        "id": "e1974f8bd3dba868",
        "type": "function",
        "z": "4a59210c8e331d38",
        "name": "Atribui variaveis [ROCKWELL]",
        "func": "var d = new Date();\nvar hora = (d.getHours()+\":\"+d.getMinutes()+\":\"+d.getSeconds()+\":\"+d.getMilliseconds());\n\nflow.set(\"hora2\", hora);\nflow.set(\"d2\", d);\n\nmsg.payload = d;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 420,
        "wires": [
            [
                "4f9a8b17e41f6eee"
            ]
        ]
    },
    {
        "id": "4f9a8b17e41f6eee",
        "type": "moment",
        "z": "4a59210c8e331d38",
        "name": "Timezone",
        "topic": "",
        "input": "",
        "inputType": "msg",
        "inTz": "America/Sao_Paulo",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "YYYY-MM-DDTHH:mm:ss.SSSSSSSZ",
        "locale": "C",
        "output": "",
        "outputType": "msg",
        "outTz": "America/Sao_Paulo",
        "x": 700,
        "y": 420,
        "wires": [
            [
                "925408963323effc"
            ]
        ]
    },
    {
        "id": "1b64042e98fa7957",
        "type": "link in",
        "z": "4a59210c8e331d38",
        "name": "link in 10",
        "links": [
            "925408963323effc"
        ],
        "x": 55,
        "y": 480,
        "wires": [
            [
                "df64cbe5ad1685d5",
                "436e07be3472a5c8"
            ]
        ]
    },
    {
        "id": "925408963323effc",
        "type": "link out",
        "z": "4a59210c8e331d38",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "1b64042e98fa7957"
        ],
        "x": 795,
        "y": 420,
        "wires": []
    },
    {
        "id": "066152a9c7971f1c",
        "type": "link in",
        "z": "4a59210c8e331d38",
        "name": "link in 11",
        "links": [
            "c6553a05417c9311"
        ],
        "x": 55,
        "y": 420,
        "wires": [
            [
                "da5d317e4c2b3222"
            ]
        ]
    },
    {
        "id": "c6553a05417c9311",
        "type": "link out",
        "z": "4a59210c8e331d38",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "066152a9c7971f1c"
        ],
        "x": 1115,
        "y": 300,
        "wires": []
    },
    {
        "id": "116aa738b77988e9",
        "type": "inject",
        "z": "4a59210c8e331d38",
        "name": "Reset Inicio",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 65,
        "y": 100,
        "wires": [
            [
                "21721468fc11cf87"
            ]
        ],
        "l": false
    },
    {
        "id": "21721468fc11cf87",
        "type": "function",
        "z": "4a59210c8e331d38",
        "name": "Reset nmsg",
        "func": "flow.set(\"aguarda2\", false);\nflow.set(\"aguarda\", false);\nflow.set(\"periodica\", false);\nflow.set(\"leitura\", []);\nglobal.set(\"posIgnore\", []);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 115,
        "y": 100,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "97abe496c16467f9",
        "type": "status",
        "z": "4a59210c8e331d38",
        "name": "",
        "scope": [
            "28ef3692ef123088"
        ],
        "x": 65,
        "y": 140,
        "wires": [
            [
                "e0e860d81037224c"
            ]
        ],
        "l": false
    },
    {
        "id": "e0e860d81037224c",
        "type": "function",
        "z": "4a59210c8e331d38",
        "name": "Reset nmsg",
        "func": "flow.set(\"reset\", false);\nif(Number(msg.status.text) > 200)\n{\n    flow.set(\"reset\", true);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 115,
        "y": 140,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "af5266a082794fab",
        "type": "comment",
        "z": "4a59210c8e331d38",
        "name": "INICIALIZAÇÃO",
        "info": "",
        "x": 120,
        "y": 20,
        "wires": []
    },
    {
        "id": "84a785513d099e61",
        "type": "comment",
        "z": "4a59210c8e331d38",
        "name": "Compara em sequencia as datas das variaveis",
        "info": "",
        "x": 220,
        "y": 620,
        "wires": []
    },
    {
        "id": "8fccf76c78713c3e",
        "type": "comment",
        "z": "4a59210c8e331d38",
        "name": "PERIODICAS",
        "info": "",
        "x": 110,
        "y": 580,
        "wires": []
    },
    {
        "id": "961bcec58ed91d9a",
        "type": "inject",
        "z": "4a59210c8e331d38",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "056b3206837d41dd"
            ]
        ]
    },
    {
        "id": "056b3206837d41dd",
        "type": "function",
        "z": "4a59210c8e331d38",
        "name": "Verifica se o tempo estourou [ROCKWELL]",
        "func": "let DataVariavelLeituraDiaAntiga = global.get('DataVariavelLeituraDiaAntiga');\nlet TipUnidadePeriodo = global.get('TipUnidadePeriodo');\nlet ValPeriodo = global.get('ValPeriodo');\nlet tempo = [];\nlet posLeiturasPeriodicas = \"\";\nvar d = new Date();\nlet antiga = [];\nlet aguarda = flow.get('aguarda') || false;\nlet posIgnore = global.get('posIgnore');\nlet pos = [];\n\n// Codigo das variaveis a serem lidas periodicamente\nvar CodVar = global.get('CodVariavelLeituraVar');\nvar CodVarDI = global.get('CodVarDI');\nvar Host = global.get('Host');\nvar TipConexao = global.get('TipConexao');\nvar CPUSlot = global.get('CPUSlot');\nvar EthernetSlot = global.get('EthernetSlot');\nvar TagName = global.get('TagName');\nvar ProgName = global.get('ProgName');\nvar DataType = global.get('DataType');\nvar CodVarDI = global.get('CodVarDI');\nvar CodVariavelLeitura = global.get('CodVariavelLeitura');\nvar TipVariavelLeitura = global.get('TipVariavelLeitura');\n\nlet ins = {};\nlet key = 0;\n\nfor(let i in TipUnidadePeriodo)\n{\n    antiga[i] = new Date(Date.parse(DataVariavelLeituraDiaAntiga[i]));\n    switch(TipUnidadePeriodo[i])\n    {\n        case 1: // segundo\n            antiga[i].setSeconds(antiga[i].getSeconds() + ValPeriodo[i]);\n            break;\n        case 2: // minuto\n            antiga[i].setMinutes(antiga[i].getMinutes() + ValPeriodo[i]);\n            break;\n        case 3: // hora\n            antiga[i].setHours(antiga[i].getHours() + ValPeriodo[i]);\n            break;\n    }\n}\n\nif(tempo != null)\n{\n    for(let i in DataVariavelLeituraDiaAntiga)\n    {\n        if (TipConexao[i] == \"ROCKWELL\") \n        {\n            if(antiga[i] <= d.getTime())\n            {\n                pos = i;\n            }\n        }\n    }\n}\n\nif(pos != null)\n{\n    if (!posIgnore.includes(pos)) \n    {\n        posLeiturasPeriodicas = pos;\n        ins[0] = [{ \n            \"delta\": key,\n            \"name\": Host[posLeiturasPeriodicas],\n            \"ip\": Host[posLeiturasPeriodicas],\n            \"cpuslot\": CPUSlot[posLeiturasPeriodicas],\n            \"ethernetslot\": EthernetSlot[posLeiturasPeriodicas],\n            \"tag\": TagName[posLeiturasPeriodicas],\n            \"prog\": ProgName[posLeiturasPeriodicas],\n            \"datatype\": DataType[posLeiturasPeriodicas],\n        }]\n        key++\n    }\n}\n\nkey = 0\nflow.set(\"posLeiturasPeriodicas\", posLeiturasPeriodicas);\n\nif(posLeiturasPeriodicas != \"\" && aguarda == false){\n    msg.payload = ins\n    /* node.warn(\"Periodicas Rockwell 1\");\n    node.warn(new Date().getTime()); */\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 680,
        "wires": [
            [
                "3aa5152373d1a18d"
            ]
        ]
    },
    {
        "id": "3aa5152373d1a18d",
        "type": "split",
        "z": "4a59210c8e331d38",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 595,
        "y": 680,
        "wires": [
            [
                "689f3769674732b7"
            ]
        ],
        "l": false
    },
    {
        "id": "a2b4fcef66c5b615",
        "type": "function",
        "z": "4a59210c8e331d38",
        "name": "forEach st-ethernet-ip [ROCKWELL]",
        "func": "let posLeiturasPeriodicas = flow.get(\"posLeiturasPeriodicas\");\nvar devices = msg.payload;\nflow.set(\"aguarda\", true);\nflow.set(\"periodica\", true);\n\nmsg = [];\n\ndevices.forEach((/** @type {{ modbus_id: any; modbus_ip: any; modbus_port: any; address: any; quantity: any; }} */ dev) => {\n   const { Controller, Tag, EthernetIP } = global.get(\"ethernetip\");\n   const { DINT, SINT, INT, BOOL, REAL } = EthernetIP.CIP.DataTypes.Types;\n\n   const PLC = new Controller(false/* , { unconnectedSendTimeout: 5064 } */);\n\n   switch (dev.datatype) {\n      case \"DINT\":\n         {\n            var tag = new Tag(dev.tag, dev.prog, DINT);\n            break;\n         }\n      case \"SINT\":\n         {\n            var tag = new Tag(dev.tag, dev.prog, SINT);\n            break;\n         }\n      case \"INT\":\n         {\n            var tag = new Tag(dev.tag, dev.prog, INT);\n            break;\n         }\n      case \"BOOL\":\n         {\n            var tag = new Tag(dev.tag, dev.prog, BOOL);\n            break;\n         }\n      case \"REAL\":\n         {\n            var tag = new Tag(dev.tag, dev.prog, REAL);\n            break;\n         }\n\n   }\n\n   PLC.connect(dev.ip, dev.cpuslot, dev.ethernetslot).then(async () => {\n      await PLC.readTag(tag);\n\n      //console.log(tag.value);\n      node.send({\n         \"topic\": \"Ethernet/IP Response\",\n         \"host\": dev.ip,\n         \"cpu\": dev.cpuslot,\n         \"ethernet\": dev.ethernetslot,\n         \"tag\": dev.tag,\n         \"prog\": dev.prog,\n         \"type\": dev.datatype,\n         \"payload\": tag.value\n      });\n      PLC.disconnect(dev.ip, dev.cpuslot, dev.ethernetslot);\n      PLC.destroy();\n   }).catch(err => {\n      const fs = global.get('fs').promises;\n      let obj;\n      let json;\n      let filePath = 'C:/Nexxus/logPeriodicaRockwell.json';\n      async function readFile(filePath) {\n         try {\n            const data = await fs.readFile(filePath);\n            //console.log(JSON.parse(data));\n            // node.warn(JSON.parse(data));\n            obj = JSON.parse(data);\n            let message = {\n               \"ip\": dev.ip,\n               \"message\": \"ERRO! Falha na leitura do host \" + dev.ip + \"!\",\n               \"error\": err.code\n            }\n            obj.push(message);\n            json = JSON.stringify(obj);\n            fs.writeFile(filePath, json, 'utf8', function (err) {\n               if (err) throw err;\n               //console.log('complete');\n               node.warn('complete');\n            }\n            );\n            msg.payload = obj[obj.length];\n            node.send(msg);\n         } catch (error) {\n            console.error(`Got an error trying to read the file: ${error.message}`);\n            node.error(`Got an error trying to read the file: ${error.message}`);\n         }\n      }\n      readFile(filePath);\n      console.log(err);\n      node.error({\n         \"ip\": dev.ip,\n         \"message\": \"ERRO! Falha na leitura do host \" + dev.ip + \"!\",\n         \"error\": err.code\n      });\n      flow.set(\"aguarda\", false);\n      flow.set(\"periodica\", false);\n   });\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 680,
        "wires": [
            [
                "75e7ed9271cfa657"
            ]
        ]
    },
    {
        "id": "689f3769674732b7",
        "type": "delay",
        "z": "4a59210c8e331d38",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 645,
        "y": 680,
        "wires": [
            [
                "a2b4fcef66c5b615"
            ]
        ],
        "l": false
    },
    {
        "id": "75e7ed9271cfa657",
        "type": "function",
        "z": "4a59210c8e331d38",
        "name": "Sai­da [ROCKWELL]",
        "func": "let CodVarDI = global.get('CodVarDI');\nlet tagOrigem = global.get('TagName');\nlet hostOrigem = global.get('Host');\nlet posLeiturasPeriodicas = flow.get('posLeiturasPeriodicas');\nlet posLeitura = [];\nlet host = msg.host;\nlet cpu = msg.cpu;\nlet ethernet = msg.ethernet;\nlet tag = msg.tag;\nlet prog = msg.prog;\nlet type = msg.type;\nlet leitura = [];\nlet key = 0;\n\n// verifica informaçoes\nfor (let i in hostOrigem) {\n    for (let j in tagOrigem) {\n        if (tag == tagOrigem[j] && host == hostOrigem[i]) {\n            if (posLeiturasPeriodicas.includes(j)) {\n                leitura = msg.payload;\n                flow.set(\"leitura\", leitura);\n\n                msg.payload = leitura\n\n                flow.set(\"aguarda\", false)\n                return msg;\n            }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 680,
        "wires": [
            [
                "2574f5171ed6bf50"
            ]
        ]
    },
    {
        "id": "8fb6b708754d7e3f",
        "type": "function",
        "z": "4a59210c8e331d38",
        "name": "Atribui variaveis [ROCKWELL]",
        "func": "var d = new Date()\nvar hora = (d.getHours()+\":\"+d.getMinutes()+\":\"+d.getSeconds()+\":\"+d.getMilliseconds())\n\nflow.set(\"hora\", hora)\nflow.set(\"d\", d)\n\nmsg.payload = d\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 800,
        "wires": [
            [
                "a850c25ca0705cc7"
            ]
        ]
    },
    {
        "id": "a850c25ca0705cc7",
        "type": "moment",
        "z": "4a59210c8e331d38",
        "name": "Timezone",
        "topic": "",
        "input": "",
        "inputType": "msg",
        "inTz": "America/Sao_Paulo",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "YYYY-MM-DDTHH:mm:ss.SSSSSSSZ",
        "locale": "C",
        "output": "",
        "outputType": "msg",
        "outTz": "America/Sao_Paulo",
        "x": 700,
        "y": 800,
        "wires": [
            [
                "48e6edb86a9fc887"
            ]
        ]
    },
    {
        "id": "ebd94b8ea8af2dd0",
        "type": "comment",
        "z": "4a59210c8e331d38",
        "name": "Escreve o arquivo de sai­da e modifica o arquivo dadosIniciais.json",
        "info": "",
        "x": 280,
        "y": 740,
        "wires": []
    },
    {
        "id": "84d66c8446b91ce8",
        "type": "subflow:9ff0a16ac9766cb5",
        "z": "4a59210c8e331d38",
        "name": "dadosIniciaisVariaveis.json",
        "x": 220,
        "y": 800,
        "wires": [
            [
                "8fb6b708754d7e3f"
            ]
        ]
    },
    {
        "id": "48e6edb86a9fc887",
        "type": "link out",
        "z": "4a59210c8e331d38",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "c62d0730556224f9"
        ],
        "x": 795,
        "y": 800,
        "wires": []
    },
    {
        "id": "18f8babf8d618915",
        "type": "function",
        "z": "4a59210c8e331d38",
        "name": "Envia saida [ROCKWELL]",
        "func": "let json = new Array();\n\nlet leitura = flow.get('leitura');\nlet TipConexao = global.get('TipConexaoVar');\nlet CodVariavelLeitura = global.get('CodVariavelLeituraVar');\nlet ValMuitoBaixo = global.get('ValMuitoBaixoVar');\nlet ValBaixo = global.get('ValBaixoVar');\nlet ValAlto = global.get('ValAltoVar');\nlet ValMuitoAlto = global.get('ValMuitoAltoVar');\nlet NumCasasDecimais = global.get('NumCasasDecimaisVar');\nlet ValEscala = global.get('ValEscalaVar');\nlet CodUnidadeEmpresa = global.get('CodUnidadeEmpresaVar');\nlet TipAlarmeDigital = global.get('TipAlarmeDigitalVar');\nlet TipVariavelLeitura = global.get('TipVariavelLeituraVar');\nlet TipMonitoracaoPeriodico = global.get('TipMonitoracaoPeriodicoVar');\n\nvar hora = flow.get('hora');\nvar data = msg.payload;\n\nconst DataAtualHoraNova = hora;\nconst DataVariavelLeituraHoraNova = hora;\nconst DataVariavelLeituraDiaNova = data;\n\nflow.set(\"DataVariavelLeituraHoraNova\", DataVariavelLeituraHoraNova);\nflow.set(\"DataVariavelLeituraDiaNova\", DataVariavelLeituraDiaNova);\nflow.set(\"DataAtualHoraNova\", DataAtualHoraNova);\n\nlet posLeiturasPeriodicas = flow.get('posLeiturasPeriodicas');\n\nlet TipFuncionando = global.get('TipFuncionandoVar');\nlet CodAreaProcessoAPF = global.get('CodAreaProcessoAPF');\nlet CodAreaProcesso = global.get('CodAreaProcessoVar');\n\nlet escreveu = false;\n\nif (posLeiturasPeriodicas != null && msg.payload != null)\n{   \n    if (TipVariavelLeitura[posLeiturasPeriodicas] == 1 || TipVariavelLeitura[posLeiturasPeriodicas] == 2)\n    {\n        leitura = leitura.toFixed(NumCasasDecimais[posLeiturasPeriodicas]);\n\n        ValMuitoBaixo[posLeiturasPeriodicas] = ValMuitoBaixo[posLeiturasPeriodicas].toFixed(NumCasasDecimais[posLeiturasPeriodicas]);\n        ValBaixo[posLeiturasPeriodicas] = ValBaixo[posLeiturasPeriodicas].toFixed(NumCasasDecimais[posLeiturasPeriodicas]);\n        ValAlto[posLeiturasPeriodicas] = ValAlto[posLeiturasPeriodicas].toFixed(NumCasasDecimais[posLeiturasPeriodicas]);\n        ValMuitoAlto[posLeiturasPeriodicas] = ValMuitoAlto[posLeiturasPeriodicas].toFixed(NumCasasDecimais[posLeiturasPeriodicas]);\n\n        if (CodAreaProcesso[posLeiturasPeriodicas] == CodAreaProcessoAPF[posLeiturasPeriodicas]) \n        {\n            TipFuncionando[posLeiturasPeriodicas] = true;\n        }\n\n        json = {\n            \"CodVariavelLeitura\": CodVariavelLeitura[posLeiturasPeriodicas],\n            \"ValMuitoBaixo\": parseFloat(ValMuitoBaixo[posLeiturasPeriodicas]),\n            \"ValBaixo\": parseFloat(ValBaixo[posLeiturasPeriodicas]),\n            \"ValVariavelLeitura\": parseFloat(leitura),\n            \"ValVariavelLeituraString\": null,\n            \"ValAlto\": parseFloat(ValAlto[posLeiturasPeriodicas]),\n            \"ValMuitoAlto\": parseFloat(ValMuitoAlto[posLeiturasPeriodicas]),\n            \"TipFuncionando\": TipFuncionando[posLeiturasPeriodicas],\n            \"DataVariavelLeitura\": DataVariavelLeituraDiaNova,\n            \"TipMonitoracaoPeriodico\": TipMonitoracaoPeriodico[posLeiturasPeriodicas]\n        };\n\n    } else if (TipVariavelLeitura[posLeiturasPeriodicas] == 3 || TipVariavelLeitura[posLeiturasPeriodicas] == 4) {\n        if (typeof (leitura) == typeof (\"string\")) {\n            json = {\n                \"CodVariavelLeitura\": CodVariavelLeitura[posLeiturasPeriodicas],\n                \"ValMuitoBaixo\": ValMuitoBaixo[posLeiturasPeriodicas],\n                \"ValBaixo\": ValBaixo[posLeiturasPeriodicas],\n                \"ValVariavelLeitura\": null,\n                \"ValVariavelLeituraString\": leitura,\n                \"ValAlto\": ValAlto[posLeiturasPeriodicas],\n                \"ValMuitoAlto\": ValMuitoAlto[posLeiturasPeriodicas],\n                \"TipFuncionando\": TipFuncionando[posLeiturasPeriodicas],\n                \"DataVariavelLeituraDia\": DataVariavelLeituraDiaNova,\n                \"TipMonitoracaoPeriodico\": TipMonitoracaoPeriodico[posLeiturasPeriodicas]\n            };\n        }\n    }\n}\n\nmsg.payload = json;\nif(msg.payload != null)\n{\n    escreveu = true\n    flow.set(\"escreveu\", escreveu);\n    flow.set(\"leitura\", [])\n    /* node.warn(\"Periodicas Rockwell 2\");\n    node.warn(new Date().getTime()); */\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 860,
        "wires": [
            [
                "745e272f280a339d"
            ]
        ]
    },
    {
        "id": "c62d0730556224f9",
        "type": "link in",
        "z": "4a59210c8e331d38",
        "name": "link in 13",
        "links": [
            "48e6edb86a9fc887"
        ],
        "x": 55,
        "y": 860,
        "wires": [
            [
                "2532a47dfee7d60d",
                "18f8babf8d618915"
            ]
        ]
    },
    {
        "id": "7850fb7717268e61",
        "type": "link in",
        "z": "4a59210c8e331d38",
        "name": "link in 14",
        "links": [
            "2574f5171ed6bf50"
        ],
        "x": 55,
        "y": 800,
        "wires": [
            [
                "84d66c8446b91ce8"
            ]
        ]
    },
    {
        "id": "2574f5171ed6bf50",
        "type": "link out",
        "z": "4a59210c8e331d38",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "7850fb7717268e61"
        ],
        "x": 1235,
        "y": 680,
        "wires": []
    },
    {
        "id": "745e272f280a339d",
        "type": "link out",
        "z": "4a59210c8e331d38",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "fa342d675785138d",
            "7f77ed8b0afce9c1"
        ],
        "x": 355,
        "y": 860,
        "wires": []
    },
    {
        "id": "2532a47dfee7d60d",
        "type": "function",
        "z": "4a59210c8e331d38",
        "name": "Altera data [ROCKWELL]",
        "func": "const fs = global.get('fs').promises;\nlet obj;\nlet json;\nlet dia = msg.payload;\nlet hora = flow.get('hora');\nlet posLeiturasPeriodicas = flow.get('posLeiturasPeriodicas');\nlet CodVariavelLeitura = global.get('CodVarDI');\nlet DataVariavelLeituraDiaAntiga = global.get('DataVariavelLeituraDiaAntiga');\nlet DataVariavelLeituraHora = global.get('DataVariavelLeituraHora');\nlet DataAtualHora = global.get('DataAtualHora');\nlet filePath = 'C:/Users/Nexxus/Desktop/Node-RED/archives/dadosIniciais.json';\n\nasync function readFile(filePath) {\n    try {\n        const data = await fs.readFile(filePath);\n        //console.log(JSON.parse(data));\n        // node.warn(JSON.parse(data));\n        obj = JSON.parse(data);\n        for (const json of obj) {\n            for(let i in json.ListaMonitoraGruposPeriodicos)\n                if (json.ListaMonitoraGruposPeriodicos[i].CodVariavelLeitura === CodVariavelLeitura[posLeiturasPeriodicas]) {\n                    json.ListaMonitoraGruposPeriodicos[i].DataVariavelLeituraDia = dia;\n                    json.ListaMonitoraGruposPeriodicos[i].DataVariavelLeituraHora = hora;\n                    json.ListaMonitoraGruposPeriodicos[i].DataAtualHora = hora;\n\n                    break;\n                }\n        }\n        if(obj != null)\n        {\n            json = JSON.stringify(obj);\n        }\n        // node.warn(json)\n        fs.writeFile(filePath, json, 'utf8', function (error) {\n            if (error) {\n                console.error(`Got an error trying to write the file: ${error.message}`);\n                node.error(`Got an error trying to write the file: ${error.message}`);\n            }\n            //console.log('complete');\n        }\n        );\n        msg.payload = obj[obj.length];\n        node.send(msg);\n\n        for (let pos in CodVariavelLeitura) {\n            if (pos == posLeiturasPeriodicas) {\n                DataVariavelLeituraDiaAntiga[pos] = data;\n                global.set(\"DataVariavelLeituraDiaAntiga\", DataVariavelLeituraDiaAntiga);\n\n                DataVariavelLeituraHora[pos] = hora;\n                global.set(\"DataVariavelLeituraHora\", DataVariavelLeituraHora);\n\n                DataAtualHora[pos] = hora;\n                global.set(\"DataAtualHora\", DataAtualHora);\n            }\n        }\n    } catch (error) {\n        console.error(`Got an error trying to read the file: ${error.message}`);\n        node.error(`Got an error trying to read the file: ${error.message}`);\n    }\n}\n\nreadFile(filePath);\nmsg.payload = dia\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "df64cbe5ad1685d5",
        "type": "function",
        "z": "4a59210c8e331d38",
        "name": "Envia saida [ROCKWELL]",
        "func": "let json = new Array();\n\nlet leitura2 = flow.get('leitura2');\nlet TipConexao = global.get('TipConexaoVar');\nlet CodVariavelLeitura = global.get('CodVariavelLeituraVar');\nlet ValMuitoBaixo = global.get('ValMuitoBaixoVar');\nlet ValBaixo = global.get('ValBaixoVar');\nlet ValAlto = global.get('ValAltoVar');\nlet ValMuitoAlto = global.get('ValMuitoAltoVar');\nlet NumCasasDecimais = global.get('NumCasasDecimaisVar');\nlet ValEscala = global.get('ValEscalaVar');\nlet CodUnidadeEmpresa = global.get('CodUnidadeEmpresaVar');\nlet TipAlarmeDigital = global.get('TipAlarmeDigitalVar');\nlet TipVariavelLeitura = global.get('TipVariavelLeituraVar');\nlet TipMonitoracaoPeriodico = global.get('TipMonitoracaoPeriodicoVar');\nlet posEventosLeitura = flow.get('posEventosLeitura');\n\nvar hora = flow.get('hora2');\nvar data = msg.payload;\n\nconst DataAtualHoraNova = hora;\nconst DataVariavelLeituraHoraNova = hora;\nconst DataVariavelLeituraDiaNova = data;\n\nflow.set(\"DataVariavelLeituraHoraNova2\", DataVariavelLeituraHoraNova);\nflow.set(\"DataVariavelLeituraDiaNova2\", DataVariavelLeituraDiaNova);\nflow.set(\"DataAtualHoraNova2\", DataAtualHoraNova);\n\nlet TipFuncionando = global.get('TipFuncionandoVar');\nlet CodAreaProcessoAPF = global.get('CodAreaProcessoAPF');\nlet CodAreaProcesso = global.get('CodAreaProcessoVar');\n\nlet escreveu2 = false;\n\nif(posEventosLeitura != null && msg.payload != null)\n{\n    for(let key in posEventosLeitura)\n    {\n        if(TipVariavelLeitura[posEventosLeitura[key]] == 1 || TipVariavelLeitura[posEventosLeitura[key]] == 2)\n        {\n            if(leitura2.length > 1)\n            {\n                for(let pos in leitura2)\n                {\n                    leitura2[pos] = leitura2[pos].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n                }\n            } else\n            {\n                leitura2 = leitura2[0].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n            }\n\n            ValMuitoBaixo[posEventosLeitura[key]] = ValMuitoBaixo[posEventosLeitura[key]].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n            ValBaixo[posEventosLeitura[key]] = ValBaixo[posEventosLeitura[key]].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n            ValAlto[posEventosLeitura[key]] = ValAlto[posEventosLeitura[key]].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n            ValMuitoAlto[posEventosLeitura[key]] = ValMuitoAlto[posEventosLeitura[key]].toFixed(NumCasasDecimais[posEventosLeitura[key]]);\n\n            if (CodAreaProcesso[posEventosLeitura[key]] == CodAreaProcessoAPF[posEventosLeitura[key]]) {\n                TipFuncionando[posEventosLeitura[key]] = true\n            }\n            \n            json = {\n                \"CodVariavelLeitura\": CodVariavelLeitura[posEventosLeitura[key]],\n                \"ValMuitoBaixo\": parseFloat(ValMuitoBaixo[posEventosLeitura[key]]),\n                \"ValBaixo\": parseFloat(ValBaixo[posEventosLeitura[key]]),\n                \"ValVariavelLeitura\": parseFloat(leitura2),\n                \"ValVariavelLeituraString\": null,\n                \"ValAlto\": parseFloat(ValAlto[posEventosLeitura[key]]),\n                \"ValMuitoAlto\": parseFloat(ValMuitoAlto[posEventosLeitura[key]]),\n                \"TipFuncionando\": TipFuncionando[posEventosLeitura[key]],\n                \"DataVariavelLeitura\": DataVariavelLeituraDiaNova,\n                \"TipMonitoracaoPeriodico\": TipMonitoracaoPeriodico[posEventosLeitura[key]]\n            };\n        } else if(TipVariavelLeitura[posEventosLeitura[key]] == 3 || TipVariavelLeitura[posEventosLeitura[key]] == 4) \n        {\n            if(leitura2.length == 1)\n            {\n                json = {\n                    \"CodVariavelLeitura\": CodVariavelLeitura[posEventosLeitura[key]],\n                    \"ValMuitoBaixo\": ValMuitoBaixo[posEventosLeitura[key]],\n                    \"ValBaixo\": ValBaixo[posEventosLeitura[key]],\n                    \"ValVariavelLeitura\": null,\n                    \"ValVariavelLeituraString\": leitura2[0],\n                    \"ValAlto\": ValAlto[posEventosLeitura[key]],\n                    \"ValMuitoAlto\": ValMuitoAlto[posEventosLeitura[key]],\n                    \"TipFuncionando\": TipFuncionando[posEventosLeitura[key]],\n                    \"DataVariavelLeituraDia\": DataVariavelLeituraDiaNova,\n                    \"TipMonitoracaoPeriodico\": TipMonitoracaoPeriodico[posEventosLeitura[key]]\n                };\n            } \n            else if(leitura2.length > 1)\n            {\n                json = {\n                    \"CodVariavelLeitura\": CodVariavelLeitura[posEventosLeitura[key]],\n                    \"ValMuitoBaixo\": ValMuitoBaixo[posEventosLeitura[key]],\n                    \"ValBaixo\": ValBaixo[posEventosLeitura[key]],\n                    \"ValVariavelLeitura\": null,\n                    \"ValVariavelLeituraString\": leitura2,\n                    \"ValAlto\": ValAlto[posEventosLeitura[key]],\n                    \"ValMuitoAlto\": ValMuitoAlto[posEventosLeitura[key]],\n                    \"TipFuncionando\": TipFuncionando[posEventosLeitura[key]],\n                    \"DataVariavelLeituraDia\": DataVariavelLeituraDiaNova,\n                    \"TipMonitoracaoPeriodico\": TipMonitoracaoPeriodico[posEventosLeitura[key]]\n                };\n            }\n        }\n    }\n}\n\nmsg.payload = json;\nif(msg.payload != null){\n    escreveu2 = true\n    flow.set(\"escreveu2\", escreveu2)\n    //node.warn(\"Eventos 2\");\n    //node.warn(new Date().getTime());\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 480,
        "wires": [
            [
                "ebd082377b9dde63"
            ]
        ]
    },
    {
        "id": "ebd082377b9dde63",
        "type": "link out",
        "z": "4a59210c8e331d38",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "2455f8aca7392015"
        ],
        "x": 355,
        "y": 480,
        "wires": []
    },
    {
        "id": "436e07be3472a5c8",
        "type": "function",
        "z": "4a59210c8e331d38",
        "name": "Altera ultima leitura [ROCKWELL]",
        "func": "const fs = global.get('fs').promises;\nlet obj;\nlet json;\nlet filePath = \"C:/Users/Nexxus/Desktop/Node-RED/archives/dadosIniciaisEventosVariaveis.json\";\nlet data = msg.payload\nlet hora = flow.get('hora')\nlet posEventosLeitura = flow.get('posEventosLeitura')\nlet posEventos = flow.get('posEventos')\nlet linha = []\nlet CodVariavelLeitura = global.get('CodVarDI')\nlet DataVariavelLeituraHora = flow.get('DataVariavelLeituraHora')\nlet DataVariavelLeituraDiaAntiga = flow.get('DataVariavelLeituraDiaAntiga')\nlet DataAtualHora = flow.get('DataAtualHora')\nlet leitura2 = flow.get('leitura2')\n\nasync function readFile(filePath) {\n    try {\n        const data = await fs.readFile(filePath);\n        console.log(JSON.parse(data));\n        // node.warn(JSON.parse(data));\n        obj = JSON.parse(data);\n        for (const json of obj) {\n            node.warn(\"posEventosLeitura\" + posEventosLeitura)\n            for(let i in json.ListaAdicionaEventosVariaveis)\n                if (json.ListaAdicionaEventosVariaveis[i].CodVariavelLeitura === CodVariavelLeitura[posEventosLeitura[i]]) {\n                    json.ListaAdicionaEventosVariaveis[i].UltimoValLeitura = leitura2[0];\n\n                    break;\n                }\n        }\n        json = JSON.stringify(obj);\n        // node.warn(json)\n        fs.writeFile(filePath, json, 'utf8', function (err) {\n            if (err) throw err;\n            console.log('complete');\n        }\n        );\n        msg.payload = obj[obj.length];\n        node.send(msg);\n    } catch (error) {\n        console.error(`Got an error trying to read the file: ${error.message}`);\n        node.error(`Got an error trying to read the file: ${error.message}`);\n    }\n}\n\nreadFile(filePath);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "d0a25a1d0a304989",
        "type": "link in",
        "z": "4a59210c8e331d38",
        "name": "link in 21",
        "links": [
            "c571d1348be81673"
        ],
        "x": 65,
        "y": 60,
        "wires": [
            [
                "21721468fc11cf87"
            ]
        ]
    },
    {
        "id": "137e1c3428ab24ee",
        "type": "comment",
        "z": "279b1bddf30193fc",
        "name": "Le dadosIniciais.json e atribui variaveis em loop",
        "info": "",
        "x": 200,
        "y": 40,
        "wires": []
    },
    {
        "id": "17938a6767499cac",
        "type": "comment",
        "z": "279b1bddf30193fc",
        "name": "Le dadosIniciaisVariaveis.json e atribui variaveis em loop",
        "info": "",
        "x": 770,
        "y": 40,
        "wires": []
    },
    {
        "id": "4bb90f9d07d3e269",
        "type": "comment",
        "z": "279b1bddf30193fc",
        "name": "Le dadosIniciaisEventosVariaveis.json e atribui variaveis em loop",
        "info": "",
        "x": 250,
        "y": 160,
        "wires": []
    },
    {
        "id": "d8eb738bfb6c67ee",
        "type": "subflow:d90c1062b3266c5e",
        "z": "279b1bddf30193fc",
        "name": "",
        "x": 110,
        "y": 100,
        "wires": []
    },
    {
        "id": "7d921545ef56df5d",
        "type": "subflow:9ff0a16ac9766cb5",
        "z": "279b1bddf30193fc",
        "name": "dadosIniciaisVariaveis.json",
        "x": 680,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "179e0d17d117c8c3",
        "type": "subflow:97d2ebec5034633f",
        "z": "279b1bddf30193fc",
        "name": "",
        "x": 160,
        "y": 220,
        "wires": []
    },
    {
        "id": "eacd2e1e244ff042",
        "type": "comment",
        "z": "279b1bddf30193fc",
        "name": "Ping",
        "info": "",
        "x": 610,
        "y": 160,
        "wires": []
    },
    {
        "id": "5fba9d3bba682b0b",
        "type": "ping",
        "z": "279b1bddf30193fc",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "",
        "host": "10.255.3.214, 10.255.2.129, 10.1.1.240",
        "timer": "1",
        "inputs": 0,
        "x": 610,
        "y": 220,
        "wires": [
            [
                "e59dbabd937fe38d"
            ]
        ]
    },
    {
        "id": "e59dbabd937fe38d",
        "type": "function",
        "z": "279b1bddf30193fc",
        "name": "function 1",
        "func": "let hostOrigem = global.get('Host');\nlet posIgnore = global.get('posIgnore');\nlet alarm_flag = context.get('alarm_flag');\nlet ipConfirm = context.get('ipConfirm');\n\nif (typeof alarm_flag == \"undefined\") {\n    alarm_flag = false;\n}\n\nif(msg.payload == false)\n{\n    for(let i in hostOrigem)\n    {\n        if (hostOrigem[i] == msg.topic)\n        {\n            if(!(posIgnore.includes(i)))\n            {\n                posIgnore.push(i);\n                global.set(\"posIgnore\", posIgnore);\n\n                if (alarm_flag == false && ipConfirm != msg.topic) {\n                    alarm_flag = true;\n                    ipConfirm = msg.topic;\n                    msg.alarm = 1;\n                    context.set(\"alarm_flag\", alarm_flag);\n                    context.set(\"ipConfirm\", ipConfirm);\n                    return msg;\n                }\n            }\n        }\n    }\n}\nelse\n{\n    for (let i in hostOrigem) {\n        if (hostOrigem[i] == msg.topic) {\n            if (posIgnore.includes(i)) {\n                var indices = [];\n                var idx = posIgnore.indexOf(i);\n                while (idx != -1)\n                {\n                    indices.push(idx);\n                    idx = posIgnore.indexOf(i, idx + 1);\n                }\n                for(let j in indices)\n                {\n                    posIgnore.splice(indices[j], 1);\n                }\n\n                global.set(\"posIgnore\", posIgnore);\n\n                if(msg.topic == ipConfirm)\n                {\n                    alarm_flag = false;\n                    msg.alarm = 0;\n                    context.set(\"alarm_flag\", alarm_flag);\n                    context.set(\"ipConfirm\", ipConfirm);\n                    return msg;\n                }\n            }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 695,
        "y": 220,
        "wires": [
            [
                "0b67d50b629d6409",
                "77d84ee2a65039bd"
            ]
        ],
        "l": false
    },
    {
        "id": "0b67d50b629d6409",
        "type": "function",
        "z": "279b1bddf30193fc",
        "name": "",
        "func": "var ip = msg.topic\n\nmsg.to = \"@gmail.com\"\nmsg.from = \"@gmail.com\"\n\nvar d = new Date()\nvar message = \"\"\n\nif(typeof ip == \"undefined\")\n{\n    ip = []\n}\n\nif(msg.alarm == 1)\n{\n    msg.topic = \"Host desconectado.\"\n    message = \"Host \"+ip+\" desconectado. Favor verificar. Data: \"+d.toLocaleString(\"pt-BR\", { timeZone: \"America/Sao_Paulo\" })+\".\"\n}\nelse if(msg.alarm == 0)\n{\n    msg.topic = \"Host reconectado.\"\n    message = \"Host \"+ip+\" reconectado. Data: \"+d.toLocaleString(\"pt-BR\", { timeZone: \"America/Sao_Paulo\" })+\".\"\n}\n\nif(message != \"\")\n{\n    msg.payload = message\n    return msg;   \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 745,
        "y": 200,
        "wires": [
            [
                "c9843a9093b11a8a"
            ]
        ],
        "l": false
    },
    {
        "id": "1f797dcbc23abc9b",
        "type": "e-mail",
        "z": "279b1bddf30193fc",
        "d": true,
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": false,
        "name": "",
        "dname": "",
        "x": 1130,
        "y": 200,
        "wires": []
    },
    {
        "id": "9618d9c18af48e07",
        "type": "telegram sender",
        "z": "279b1bddf30193fc",
        "d": true,
        "name": "bot",
        "bot": "f51287b6fd292c7e",
        "haserroroutput": true,
        "outputs": 2,
        "x": 830,
        "y": 240,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "77d84ee2a65039bd",
        "type": "function",
        "z": "279b1bddf30193fc",
        "name": "",
        "func": "msg.payload = {}\nmsg.payload.chatId = -715413147\nmsg.payload.type = 'message'\nmsg.payload.content = \"\"\n\nvar ip = msg.topic\n\nvar d = new Date()\nvar message = \"\"\n\nif(typeof ip == \"undefined\")\n{\n    ip = []\n}\n\nif(msg.alarm == 1)\n{\n    msg.payload.content = \"Host \"+ip+\" desconectado. Favor verificar. Data: \"+d.toLocaleString(\"pt-BR\", { timeZone: \"America/Sao_Paulo\" })+\".\"\n}\nelse if(msg.alarm == 0)\n{\n    msg.payload.content =\"Host \"+ip+\" reconectado. Data: \"+d.toLocaleString(\"pt-BR\", { timeZone: \"America/Sao_Paulo\" })+\".\"\n}\n\nif(msg.payload.content != \"\")\n{\n    return msg;   \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 745,
        "y": 240,
        "wires": [
            [
                "9618d9c18af48e07"
            ]
        ],
        "l": false
    },
    {
        "id": "61fd07d731dd8ca4",
        "type": "mjml-parse",
        "z": "279b1bddf30193fc",
        "name": "",
        "x": 990,
        "y": 200,
        "wires": [
            [
                "1f797dcbc23abc9b"
            ]
        ]
    },
    {
        "id": "c9843a9093b11a8a",
        "type": "template",
        "z": "279b1bddf30193fc",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<mjml>\n  <mj-body>\n    <mj-section>\n      <mj-column>\n\t  \t\t<mj-image  width=\"300px\" src=\"https://i.imgur.com/UXYG8Qy.jpg\" alt=\"logo\"></mj-image>\n        <mj-divider border-color=\"#0183C1\"></mj-divider>\n        <mj-text font-size=\"16px\">{{payload}}</mj-text>\n        <mj-text>\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n        </mj-text>\n\t\t\t<mj-image  width=\"800px\" src=\"https://i.imgur.com/L1tEQTs.png\" alt=\"sign\" /></mj-image>\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>",
        "output": "str",
        "x": 840,
        "y": 200,
        "wires": [
            [
                "61fd07d731dd8ca4"
            ]
        ]
    },
    {
        "id": "3b881b141e7ea408",
        "type": "comment",
        "z": "279b1bddf30193fc",
        "name": "Formata saida para varaivelLeituraPeriodicaValor.json e variavelLeituraValor.json",
        "info": "",
        "x": 300,
        "y": 280,
        "wires": []
    },
    {
        "id": "7f77ed8b0afce9c1",
        "type": "link in",
        "z": "279b1bddf30193fc",
        "name": "link in 17",
        "links": [
            "21504a788f1818da",
            "745e272f280a339d",
            "5cd1902783b0d913",
            "69854bee471572cd"
        ],
        "x": 35,
        "y": 340,
        "wires": [
            [
                "0b0212c9a0f48089"
            ]
        ]
    },
    {
        "id": "bcb19500dbc36466",
        "type": "debug",
        "z": "279b1bddf30193fc",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 340,
        "wires": []
    },
    {
        "id": "25d5bd13920f6690",
        "type": "function",
        "z": "279b1bddf30193fc",
        "name": "Read/write variavelLeituraPeriodicaOpcValor.json",
        "func": "const fs = global.get('fs').promises;\nlet obj;\nlet json;\nlet filePath = 'C:/Nexxus/variavelLeituraPeriodicaOpcValor.json';\nasync function readFile(filePath) {\n    try {\n        let data = await fs.readFile(filePath);\n        try {\n            obj = JSON.parse(data);\n        } catch (error) {\n            console.log(error);\n            node.error(error);\n            if (error.message.includes(\"Unexpected token }\")) {\n                data = data.slice(0, -2);\n                node.warn(data)\n                try {\n                    obj = JSON.parse(data);\n                } catch (error) {\n                    console.log(error);\n                    node.error(error);\n                }\n            }\n            if (error.message.includes(\"Unexpected number\")){\n                data = data.slice(0, -3);\n                node.warn(data)\n                try {\n                    obj = JSON.parse(data);\n                } catch (error) {\n                    console.log(error);\n                    node.error(error);\n                }\n            }\n        }\n        //node.warn(obj)\n        //node.warn(data.toString())\n        obj.push(msg.payload);\n        json = JSON.stringify(obj);\n        fs.writeFile(filePath, json, 'utf8', function (error) {\n            if (error) {\n                fs.writeFile(filePath, json, 'utf8', function (error) {\n                    if (error) {\n                        console.error(`Got an error trying to write the file: [${error.code}] ${error.message}`);\n                        node.error(`Got an error trying to write the file: [${error.code}] ${error.message}`);\n                    }\n                }\n                );\n            }\n        }\n        );\n        msg.payload = obj[obj.length];\n        node.send(msg);\n    } catch (error) {\n        console.error(`Got an error trying to read the file: [${error.code}] ${error.message}`);\n        node.error(`Got an error trying to read the file: [${error.code}] ${error.message}`);\n    }\n}\n\nreadFile(filePath);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 340,
        "wires": [
            [
                "bcb19500dbc36466"
            ]
        ]
    },
    {
        "id": "0b0212c9a0f48089",
        "type": "delay",
        "z": "279b1bddf30193fc",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 85,
        "y": 340,
        "wires": [
            [
                "25d5bd13920f6690"
            ]
        ],
        "l": false
    },
    {
        "id": "37430b9e55666195",
        "type": "function",
        "z": "279b1bddf30193fc",
        "name": "Read/write variavelLeituraOpcValor.json",
        "func": "const fs = global.get('fs').promises;\nlet obj;\nlet json;\nlet filePath = 'C:/Nexxus/variavelLeituraOpcValor.json';\nasync function readFile(filePath) {\n    try {\n        const data = await fs.readFile(filePath);\n        //console.log(JSON.parse(data));\n        node.warn(JSON.parse(data));\n        obj = JSON.parse(data);\n        obj.push(msg.payload);\n        json = JSON.stringify(obj);\n        fs.writeFile(filePath, json, 'utf8', function (err) {\n            if (err) throw err;\n            //console.log('complete');\n        }\n        );\n        msg.payload = obj[obj.length];\n        node.send(msg);\n    } catch (error) {\n        console.error(`Got an error trying to read the file: ${error.message}`);\n        node.error(`Got an error trying to read the file: ${error.message}`);\n        msg.payload = 'reset';\n        node.send(msg)\n    }\n}\n\nreadFile(filePath);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 400,
        "wires": [
            [
                "c571d1348be81673"
            ]
        ]
    },
    {
        "id": "18dce435d169bc42",
        "type": "delay",
        "z": "279b1bddf30193fc",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 85,
        "y": 400,
        "wires": [
            [
                "37430b9e55666195"
            ]
        ],
        "l": false
    },
    {
        "id": "2455f8aca7392015",
        "type": "link in",
        "z": "279b1bddf30193fc",
        "name": "link in 18",
        "links": [
            "5b7c28b03b2ad138",
            "ebd082377b9dde63",
            "b1c18434b4ab4a11"
        ],
        "x": 35,
        "y": 400,
        "wires": [
            [
                "18dce435d169bc42"
            ]
        ]
    },
    {
        "id": "c571d1348be81673",
        "type": "link out",
        "z": "279b1bddf30193fc",
        "name": "link out 21",
        "mode": "link",
        "links": [
            "63359309fd2285f3",
            "b4a717113a64a177",
            "d0a25a1d0a304989"
        ],
        "x": 475,
        "y": 400,
        "wires": []
    },
    {
        "id": "8713f12aea22aad3",
        "type": "inject",
        "z": "279b1bddf30193fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 90,
        "y": 460,
        "wires": [
            [
                "2a582f6ac13e0e53"
            ]
        ]
    },
    {
        "id": "2a582f6ac13e0e53",
        "type": "file",
        "z": "279b1bddf30193fc",
        "name": "",
        "filename": "C:/Nexxus/variavelLeituraPeriodicaOpcValor.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 370,
        "y": 460,
        "wires": [
            []
        ]
    }
]